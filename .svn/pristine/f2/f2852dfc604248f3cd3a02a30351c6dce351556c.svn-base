/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.common.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.lang3.time.DateFormatUtils;


/**
 * 日期工具类, 继承org.apache.commons.lang.time.DateUtils类
 * @author ThinkGem
 * @version 2014-4-15
 */
public class DateUtils extends org.apache.commons.lang3.time.DateUtils {


	/**
	 * 夏时令午休时间
	 */
	private static Long SUMMBERTIME = 5400000L;
	
	/**
	 * 东时令午休时间
	 */
	private static Long WINTERRTIME = 3600000L;
	
	
	private static String[] parsePatterns = {
		"yyyy-MM-dd", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm", "yyyy-MM", 
		"yyyy/MM/dd", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm", "yyyy/MM",
		"yyyy.MM.dd", "yyyy.MM.dd HH:mm:ss", "yyyy.MM.dd HH:mm", "yyyy.MM"};

	/**
	 * 得到当前日期字符串 格式（yyyy-MM-dd）
	 */
	public static String getDate() {
		return getDate("yyyy-MM-dd");
	}
	
	/**
	 * 得到当前日期字符串 格式（yyyy-MM-dd） pattern可以为："yyyy-MM-dd" "HH:mm:ss" "E"
	 */
	public static String getDate(String pattern) {
		return DateFormatUtils.format(new Date(), pattern);
	}
	
	/**
	 * 得到日期字符串 默认格式（yyyy-MM-dd） pattern可以为："yyyy-MM-dd" "HH:mm:ss" "E"
	 */
	public static String formatDate(Date date, Object... pattern) {
		String formatDate = null;
		if (pattern != null && pattern.length > 0) {
			formatDate = DateFormatUtils.format(date, pattern[0].toString());
		} else {
			formatDate = DateFormatUtils.format(date, "yyyy-MM-dd");
		}
		return formatDate;
	}
	
	public static String formatDate(Date date, String pattern) {
		String formatDate = null;
		if(date!=null){
			if (pattern != null && pattern.length()> 0) {
				formatDate = DateFormatUtils.format(date, pattern);
			} else {
				formatDate = DateFormatUtils.format(date, "yyyy-MM-dd");
			}
		}else{
			return "";
		}
		return formatDate;
	}
	
	/**
	 * 得到日期时间字符串，转换格式（yyyy-MM-dd HH:mm:ss）
	 */
	public static String formatDateTime(Date date) {
		return formatDate(date, "yyyy-MM-dd HH:mm:ss");
	}

	/**
	 * 得到当前时间字符串 格式（HH:mm:ss）
	 */
	public static String getTime() {
		return formatDate(new Date(), "HH:mm:ss");
	}

	/**
	 * 得到当前日期和时间字符串 格式（yyyy-MM-dd HH:mm:ss）
	 */
	public static String getDateTime() {
		return formatDate(new Date(), "yyyy-MM-dd HH:mm:ss");
	}

	/**
	 * 得到当前年份字符串 格式（yyyy）
	 */
	public static String getYear() {
		return formatDate(new Date(), "yyyy");
	}

	/**
	 * 得到当前月份字符串 格式（MM）
	 */
	public static String getMonth() {
		return formatDate(new Date(), "MM");
	}

	/**
	 * 得到当天字符串 格式（dd）
	 */
	public static String getDay() {
		return formatDate(new Date(), "dd");
	}

	/**
	 * 得到当前星期字符串 格式（E）星期几
	 */
	public static String getWeek() {
		return formatDate(new Date(), "E");
	}
	
	/**
	 * 日期型字符串转化为日期 格式
	 * { "yyyy-MM-dd", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm", 
	 *   "yyyy/MM/dd", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm",
	 *   "yyyy.MM.dd", "yyyy.MM.dd HH:mm:ss", "yyyy.MM.dd HH:mm" }
	 */
	public static Date parseDate(Object str) {
		if (str == null){
			return null;
		}
		try {
			return parseDate(str.toString(), parsePatterns);
		} catch (ParseException e) {
			return null;
		}
	}
	

	/**
	 * 获取过去的天数
	 * @param date
	 * @return
	 */
	public static long pastDays(Date date) {
		long t = new Date().getTime()-date.getTime();
		return t/(24*60*60*1000);
	}

	/**
	 * 获取过去的小时
	 * @param date
	 * @return
	 */
	public static long pastHour(Date date) {
		long t = new Date().getTime()-date.getTime();
		return t/(60*60*1000);
	}
	
	/**
	 * 获取过去的分钟
	 * @param date
	 * @return
	 */
	public static long pastMinutes(Date date) {
		long t = new Date().getTime()-date.getTime();
		return t/(60*1000);
	}
	
	/**
	 * 转换为时间（天,时:分:秒.毫秒）
	 * @param timeMillis
	 * @return
	 */
    public static String formatDateTime(long timeMillis){
		long day = timeMillis/(24*60*60*1000);
		long hour = (timeMillis/(60*60*1000)-day*24);
		long min = ((timeMillis/(60*1000))-day*24*60-hour*60);
		long s = (timeMillis/1000-day*24*60*60-hour*60*60-min*60);
		long sss = (timeMillis-day*24*60*60*1000-hour*60*60*1000-min*60*1000-s*1000);
		return (day>0?day+",":"")+hour+":"+min+":"+s+"."+sss;
    }
	
	/**
	 * 获取两个日期之间的天数
	 * 
	 * @param before
	 * @param after
	 * @return
	 */
	public static double getDistanceOfTwoDate(Date before, Date after) {
		long beforeTime = before.getTime();
		long afterTime = after.getTime();
		return (afterTime - beforeTime) / (1000 * 60 * 60 * 24);
	}
	

	
	/**
	 * 得到当前日期
	 */
	public static Date getDatetime() {
		return new Date();
	}
	
	 public static int getDaysOfMonth(Date date) {  
        Calendar calendar = Calendar.getInstance();  
        calendar.setTime(date);  
        return calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  
    }  
	 
	 /**
	  * date1 在date2前返回值大于0,
	  * date1在date2后返回值小于0,
	  * date1在date2后返回值等于0.
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static int compareDate(Date date1,Date date2){
         if (date1.getTime() > date2.getTime()) {
             return 1;
         } else if (date1.getTime() < date2.getTime()) {
             return -1;
         } else {
             return 0;
         }
	 }

	
	/**
	 * 计算从开始日期到结束日期之间的天数
	 * @param dateBegin 开始日期
	 * @param dateEnd 结束日期
	 * @param step 初始步长
	 * @param outList 需要排除的日期集合
	 * @param tag 是否排除周末
	 * @return
	 */
	public static Integer getUserfulStep(Date dateBegin,Date dateEnd,Integer step,Collection<Date> outList,boolean tag){
		dateBegin=getCutDateByPattern(dateBegin, "yyyy-MM-dd");
		dateEnd=getCutDateByPattern(dateEnd, "yyyy-MM-dd");
		if(dateBegin.getTime()>=dateEnd.getTime()){
			return step;
		}else{
			Date nextDate=new Date(dateBegin.getTime());
			while(nextDate.getTime()<dateEnd.getTime()){
				nextDate.setTime(nextDate.getTime()+24*60*60*1000);
				if(checkDateIsornotCorrect(nextDate,outList,tag)){
					step=step+1;
				}
			}
			return step;
		}
	}
	
	/**
	 * 计算从开始日期到结束日期之间的天数
	 * @param dateBegin 开始日期
	 * @param dateEnd 结束日期
	 * @param outList 需要排除的日期集合
	 * @param tag 是否排除周末
	 * @return
	 */
	public static Integer getUserfulStep(Date dateBegin,Date dateEnd,Collection<Date> outList,boolean tag){
		return getUserfulStep(dateBegin, dateEnd, 0, outList, tag);
	}
	
	/**
	 * 获取从开始日期到指定天数的日期
	 * @param dateBegin 开始日期
	 * @param outList 需要排除的日期集合
	 * @param day 指定天数，不包含开始日期
	 * @param tag 是否排除周末,true排除，false不排除
	 * @return
	 */
	public static Date getDateEnd(Date dateBegin,Collection<Date> outList,int day,boolean tag){
		
		if(day<1){
			return dateBegin;
		}else{
			Date nextDate=new Date(dateBegin.getTime());
			while(day>0){
				nextDate.setTime(nextDate.getTime()+24*60*60*1000);
				if(checkDateIsornotCorrect(nextDate,outList,tag)){
					day=day-1;
				}
			}
			return nextDate;
		}
	}
	
	/**
	 * 判断日期是否符合条件，如果日期既不是周末，也不在排除的日期列表之内，则符合条件
	 * @param date 需要被判断的日期
	 * @param outList 需要排除的日期列表
	 * @param tag 是否排除周末,true排除，false不排除
	 * @return
	 */
	public static boolean checkDateIsornotCorrect(Date date,Collection<Date> outList,boolean tag){
		if(tag){
			if(CheckDateIsornotWeekend(date)){
				return false;
			}
		}
		
		if(checkDateIsornotInOutList(date,outList)){
			return false;
		}
		return true;
	}
	/**
	 * 判断日期是否是周末
	 * @param date
	 * @return
	 */
	public static boolean CheckDateIsornotWeekend(Date date){
	    Calendar cal = Calendar.getInstance();
	    cal.setTime(date);
	    if(cal.get(Calendar.DAY_OF_WEEK)==Calendar.SATURDAY||cal.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
	    {
	    	return true;
	    }
		return false;
	}
	
	/**
	 * 判断日期是否在排除的集合之内
	 * @param nextDate
	 * @param outList
	 * @return
	 */
	public static boolean checkDateIsornotInOutList(Date date,Collection<Date> outList){
		String pattern="MM-dd";
		String result=formatDate(date, pattern);
		if(outList!=null){
			for (Date date0 : outList) {
				String current=formatDate(date0, pattern);
				if(StringUtils.equals(result, current)){
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * 根据pattern的精度获取相应精度的日期对象
	 * @param date
	 * @param pattern
	 * @return
	 */
	public static Date getCutDateByPattern(Date date,String pattern){
		String result=formatDate(date, pattern);
		try {
			return parseDate(result.toString(), pattern);
		} catch (ParseException e) {
			return null;
		}
	}
	
	
	/**
	 * 获取当前日期是星期几
	 * 
	 * @param dt
	 * @return 当前日期是星期几
	 */
	public static int getWeekOfDate(Date dt) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(dt);
		int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
		if (w < 0)
			w = 0;
		return w;
	}

	/**
	 * 得到几天前的时间
	 * 
	 * @param d
	 * @param day
	 * @return
	 */
	public static Date getDateBefore(Date d, int day) {
		Calendar now = Calendar.getInstance();
		now.setTime(d);
		now.set(Calendar.DATE, now.get(Calendar.DATE) - day);
		return now.getTime();
	}

	/**
	 * 得到几天后的时间
	 * 
	 * @param d
	 * @param day
	 * @return
	 */
	public static Date getDateAfter(Date d, int day) {
		Calendar now = Calendar.getInstance();
		now.setTime(d);
		now.set(Calendar.DATE, now.get(Calendar.DATE) + day);
		return now.getTime();
	}

	/**
	 * 获取这月的天数
	 * 
	 * @param dt
	 * @return 这月的天数
	 */
	public static int getDaysOfDate(Date dt) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(dt);
		calendar.roll(Calendar.DATE, false);
		return calendar.get(Calendar.DATE);
	}

	/**
	 * 午休时间
	 * @return
	 */
	public static Long getLunchBreak(String month)
	{
		String [] summerMonths = {"05","06","07","08","09","10"};
		
		if (Arrays.asList(summerMonths).contains(month))
			return SUMMBERTIME;
		
		return WINTERRTIME;
	}
	
	
	/**
	 * @param args
	 * @throws ParseException
	 */
	public static void main(String[] args) throws ParseException {
		/*Date current=new Date();
		String a=DateUtils.formatDate(current, "yyyy-MM-dd");
		long currentDateTime=DateUtils.parseDate(a,"yyyy-MM-dd").getTime();
		System.out.println(current.getTime()+":::"+currentDateTime);
		System.out.println(formatDate(getDateEnd(new Date(),null,1000,true), "yyyy-MM-dd E"));
		current=new Date();
		String b=DateUtils.formatDate(current, "yyyy-MM-dd");
		long endDateTime=DateUtils.parseDate(b,"yyyy-MM-dd").getTime();
		System.out.println(current.getTime()+":::"+endDateTime);
		if(currentDateTime==endDateTime){System.out.println("true");}*/
		
		/*System.out.println(getMonth());*/
		
		Date current=new Date();
		String a=DateUtils.formatDate(current, "yyyy-MM-dd");
		long currentDateTime=DateUtils.parseDate(a,"yyyy-MM-dd").getTime();
		System.out.println(current.getTime()+":::"+currentDateTime);
		System.out.println(getUserfulStep(parseDate("2017-04-20", "yyyy-MM-dd"), parseDate("2017-04-31", "yyyy-MM-dd"), 0, null, true));
		
		current=new Date();
		String b=DateUtils.formatDate(current, "yyyy-MM-dd");
		long endDateTime=DateUtils.parseDate(b,"yyyy-MM-dd").getTime();
		System.out.println(current.getTime()+":::"+endDateTime);
		if(currentDateTime==endDateTime){System.out.println("true");}
	}
	public static String formateWorktime(Long time) {
		
		String result="";
		if(time!=null){
			
			try {
				Date date= DateUtils.parseDate("2017-05-02", "yyyy-MM-dd");
				date=new Date(date.getTime()+time);
				
				
				if(time<1000*60){
					result="0";
				}else if(time<1000*60*60&&time>1000*60){
					result=DateUtils.formatDate(date, "mm分");
				}else if (time<1000*60*60*24 && time > 1000*60*60){
					result=DateUtils.formatDate(date, "H小时mm分");
				}
				else
				{
					long days = time / (1000 * 60 * 60 * 24);
					
					long hours = (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) + days * 24;
					
					long minutes = (time % (1000 * 60 * 60)) / (1000 * 60);
					
					result = hours + "小时" + minutes + "分";
				}
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				result="";
			}
		}
		
		
		return result;
	}
/*	
	public static Integer getUserfulStep(Date dateBegin,Date dateEnd,Integer step,Collection<Date> outList,boolean tag){
		dateBegin=getCutDateByPattern(dateBegin, "yyyy-MM-dd");
		dateEnd=getCutDateByPattern(dateEnd, "yyyy-MM-dd");
		if(dateBegin.getTime()>=dateEnd.getTime()){
			return step;
		}else{
			long next=dateBegin.getTime()+24*60*60*1000;
			Date nextDate=new Date(next);
			if(checkDateIsornotCorrect(nextDate,outList,tag)){
				step=step+1;
			}
			return getUserfulStep(nextDate,dateEnd,step,outList,tag);
		}
	}*/	
	
/*	public static Date getDateEndx(Date dateBegin,Collection<Date> outList,int day,boolean tag){
		if(day<1){
			return dateBegin;
		}else{
			long next=dateBegin.getTime()+24*60*60*1000;
			Date nextDate=new Date(next);
			if(checkDateIsornotCorrect(nextDate,outList,tag)){
				day=day-1;
			}
			return getDateEndx(nextDate,outList,day,tag);
		}
	}*/
/*	public static Date getDateEndy(Date dateBegin, Collection<Date> outList, int day, boolean tag) {
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(dateBegin);

		int sumWeekends = 0;
		int i = 0;
		while (i < day) {
			int week = calendar.get(Calendar.DAY_OF_WEEK);
			if (week == Calendar.SATURDAY || week == Calendar.SUNDAY) {
				sumWeekends++;
			}
			calendar.add(Calendar.DATE, 1);
			i++;
		}

		if (tag) {
			calendar.add(Calendar.DATE, sumWeekends);
		}

		if (outList != null) {
			int sumOutdays = 0;
			long timeBegin = dateBegin.getTime();
			calendar.add(Calendar.DATE, outList.size());
			long timeEnd = calendar.getTime().getTime();
			calendar.add(Calendar.DATE, -outList.size());

			for (Date date : outList) {
				Calendar tempCalendar = new GregorianCalendar();
				tempCalendar.setTime(date);

				if (timeBegin <= date.getTime() && date.getTime() <= timeEnd) {
					if (tag) {
						int week = tempCalendar.get(Calendar.DAY_OF_WEEK);
						if (week == Calendar.SATURDAY || week == Calendar.SUNDAY) {
							continue;
						} else {
							sumOutdays++;
						}
					} else {
						sumOutdays++;
					}
				}
			}

			calendar.add(Calendar.DATE, sumOutdays);
		}

		return calendar.getTime();
	}*/
}
