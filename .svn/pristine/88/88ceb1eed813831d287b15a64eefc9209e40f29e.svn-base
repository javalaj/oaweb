/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.oa.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.task.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.CrudService;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.act.service.ActTaskService;
import com.thinkgem.jeesite.modules.oa.actRouting.ActRouting;
import com.thinkgem.jeesite.modules.oa.dao.OaGooutDao;
import com.thinkgem.jeesite.modules.oa.entity.OaGoout;
import com.thinkgem.jeesite.modules.oa.entity.filling.OaFilling;
import com.thinkgem.jeesite.modules.oa.service.filling.OaFillingService;
import com.thinkgem.jeesite.modules.oa.service.flowback.OaFlowBackService;
import com.thinkgem.jeesite.modules.sys.entity.workflow.SysWorkflowVar;
import com.thinkgem.jeesite.modules.sys.service.workflow.SysWorkflowVarService;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

/**
 * 外出申请流程业务Service
 * 
 * @author liuxin
 * @version 2016-11-18
 */
@Service
@Transactional(readOnly = true)
public class OaGooutService extends CrudService<OaGooutDao, OaGoout> {
	@Autowired
	private ActTaskService actTaskService;// 工作流业务类
	@Autowired
	private OaFillingService oaFillingService;// 归档表
	@Autowired
	private SysWorkflowVarService sysWorkflowVarService;// 工作流变量service
	@Autowired
	private OaOvertimeService oaOvertimeService;// 抄送通知的service
												// OaOvertimeService
	@Autowired
	private OaFlowBackService oaFlowBackService;// 流程撤回业务service

	public OaGoout get(String id) {
		return super.get(id);
	}

	public List<OaGoout> findList(OaGoout oaGoout) {
		return super.findList(oaGoout);
	}

	public Page<OaGoout> findPage(Page<OaGoout> page, OaGoout oaGoout) {
		return super.findPage(page, oaGoout);
	}

	@Transactional(readOnly = false)
	public void delete(OaGoout oaGoout) {
		super.delete(oaGoout);
	}

	public OaGoout getByProcInsId(String procInsId) {
		return dao.getByProcInsId(procInsId);
	}

	/**
	 * save业务逻辑方法
	 */
	@Transactional(readOnly = false)
	public void save(OaGoout oaGoout, String flag) {
		if (StringUtils.isBlank(oaGoout.getOfficename())) {
			// 查询出部门名称，并设置
			oaGoout.setOfficename(UserUtils.getUser().getOffice().getName());
		}
		super.save(oaGoout);// 该步骤为默认继承步骤，直接保存该记录。
		Map<String, Object> vars = new HashMap<String, Object>();
		// 这里put 流程图上所有的需要值，以便于activiti流插件，的控制
		vars.put("apply", UserUtils.getUser().getLoginName());// 发起人登陆名字
		vars.put("upper", ActRouting.getUpper(UserUtils.getUser().getId()));// 上级登陆名字
		vars.put("flag", true);// 流程控制标志位 boolean
		SysWorkflowVar sysWorkflowVar = new SysWorkflowVar();
		sysWorkflowVar.setWorkflowIdentification("oa_goout");
		sysWorkflowVar.setVarName("filling");
		vars.put("filling", sysWorkflowVarService.findBySignVar(sysWorkflowVar).get(0).getVarValue());// 人力资源登陆名字
		if (StringUtils.isBlank(oaGoout.getProcInsId())) {
			// 流程关联id为null所以为第一次创建
			oaGoout.setProcInsId(actTaskService.startProcess("oa_goout", "oa_goout", oaGoout.getId(),
					"外出申请流程【" + UserUtils.getUser().getName() + " " + DateUtils.getDate() + "】", vars));
			// 线程暂停两秒，使得流程流转信息排序正确，防止开始和申请排序颠倒
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// 执行下一步
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(oaGoout.getProcInsId()).list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), oaGoout.getProcInsId(), "【提交】", null, vars);
				// 流程撤回操作数据设置
				oaFlowBackService.saveINIT(oaGoout.getProcInsId(), list.get(0),
						"/oa/oaGoout/form?flag=view&id=" + oaGoout.getId());
			}
		} else {
			// 打回后，以及第一次流程启动成功后的相同步骤
			oaGoout.setExamname(null);
			oaGoout.setExamtext(null);
			String examtext = "【重新提交】";
			if (flag.equals("1")) {

				vars.put("flag", false);// 流程控制标志位 boolean
				examtext = "【作废】";
			}
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(oaGoout.getProcInsId()).list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), oaGoout.getProcInsId(), examtext, null, vars);
				if (flag.equals("1")) {
					// 流程撤回操作数据设置
					oaFlowBackService.saveNULL(oaGoout.getProcInsId());
				} else {
					// 流程撤回操作数据设置
					oaFlowBackService.saveNOW(oaGoout.getProcInsId(),list.get(0));
				}
			}

			super.save(oaGoout);
		}

	}

	/**
	 * dealExam业务逻辑方法
	 * 
	 * exam 1不同意 ，0同意
	 */
	@Transactional(readOnly = false)
	public void dealExam(OaGoout oaGoout, String exam) {
		// 审批人签名??
		oaGoout.setExamname(UserUtils.getUser().getName());
		Map<String, Object> vars = new HashMap<String, Object>();
		String examStr = "";
		if (exam.equals("0")) {// 上级审核同意
			// 定制vars
			vars.put("flag", true);// 流程控制标志位 boolean
			examStr = "【同意】";
		} else {
			// 上级审核不同意
			vars.put("flag", false);// 流程控制标志位 boolean
			examStr = "【不同意】";
			oaOvertimeService.sendMsg("@@proNotify@@/oa/a/oa/oaGoout/form?id=" + oaGoout.getId(), "您提交的外出申请流程【"
					+ DateUtils.formatDate(oaGoout.getCreateDate()) + "】已被【" + UserUtils.getUser().getName() + "】退回",
					oaGoout.getCreateBy().getId());
		}
		oaGoout.setExamtext(examStr + oaGoout.getExamtext());
		List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
				.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(oaGoout.getProcInsId()).list();
		if (list.size() > 0) {
			actTaskService.complete(list.get(0).getId(), oaGoout.getProcInsId(), oaGoout.getExamtext(), null, vars);
			// 流程撤回操作数据设置
						oaFlowBackService.saveNOW(oaGoout.getProcInsId(), list.get(0));
		}
		super.save(oaGoout);// 更新业务表字段
	}

	/**
	 * dealFilling业务逻辑方法
	 * 
	 */
	@Transactional(readOnly = false)
	public void dealFilling(OaGoout oaGoout, String exam, String ftext) {
		List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
				.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(oaGoout.getProcInsId()).list();
		//
		Map<String, Object> vars = new HashMap<String, Object>();
		String examStr = "";
		if (exam.equals("0")) {// 上级审核同意
			// 定制vars
			vars.put("flag", true);// 流程控制标志位 boolean
			examStr = "【同意】";
			//
			// 归档表数据录入
			OaFilling oaFilling = new OaFilling();
			oaFilling.setApplyDate(oaGoout.getCreateDate());
			oaFilling.setApplyReason(oaGoout.getReason());
			oaFilling.setApplyType("外出");
			// oaFilling.setApplyTypeLit(DictUtils.getDictValue(oaGoout.getVacatetype(),
			// "pro_vacate_type", ""));// 通过数据字典去取得然后存中文
			oaFilling.setApplyUser(oaGoout.getCreateBy());
			oaFilling.setFillingDate(new Date());
			oaFilling.setHours(oaGoout.getTime());
			oaFilling.setBeginDate(oaGoout.getStarttime());
			oaFilling.setEndDate(oaGoout.getEndtime());
			oaFillingService.save(oaFilling);
			// 发送通知
			oaOvertimeService.sendMsg("@@proNotify@@/oa/a/oa/oaGoout/form?flag=view&id=" + oaGoout.getId(),
					"您提交的外出申请流程【" + DateUtils.formatDate(oaGoout.getCreateDate()) + "】已被【"
							+ UserUtils.getUser().getName() + "】办结",
					oaGoout.getCreateBy().getId());
		} else {
			// 上级审核不同意
			vars.put("flag", false);// 流程控制标志位 boolean
			examStr = "【不同意】";// 发送通知
			oaOvertimeService.sendMsg("@@proNotify@@/oa/a/oa/oaGoout/form?id=" + oaGoout.getId(), "您提交的外出申请流程【"
					+ DateUtils.formatDate(oaGoout.getCreateDate()) + "】已被【" + UserUtils.getUser().getName() + "】退回",
					oaGoout.getCreateBy().getId());
		}
		if (list.size() > 0) {
			actTaskService.complete(list.get(0).getId(), oaGoout.getProcInsId(), examStr + "【归档】" + ftext, null, vars);
			if (exam.equals("0")) {
				// 流程撤回操作数据设置
				oaFlowBackService.saveNULL(oaGoout.getProcInsId());
			} else {
				// 流程撤回操作数据设置
				oaFlowBackService.saveNOW(oaGoout.getProcInsId(), list.get(0));
			}
		}

	}

	/**
	 * 判断当前用户是否需要去form页面创建，审批，修改这个流程
	 */
	public boolean isDeal(OaGoout oaGoout) {
		if (StringUtils.isBlank(oaGoout.getId())) {
			return true;
		} else {
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(oaGoout.getProcInsId()).list();
			if (list.size() > 0) {
				return true;
			}
		}
		return false;
	}

}