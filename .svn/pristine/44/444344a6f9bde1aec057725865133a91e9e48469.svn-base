/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.user.web;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.act.service.ActTaskService;
import com.thinkgem.jeesite.modules.oa.entity.CyTspOaMonthlyPlan;
import com.thinkgem.jeesite.modules.oa.entity.OaNotify;
import com.thinkgem.jeesite.modules.oa.entity.entertainmentr.OaEntertainmentReimbursement;
import com.thinkgem.jeesite.modules.oa.entity.sign.OaSign;
import com.thinkgem.jeesite.modules.oa.service.OaNotifyService;
import com.thinkgem.jeesite.modules.oa.web.util.TaskUtil;
import com.thinkgem.jeesite.modules.sys.entity.Office;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.OfficeService;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.user.entity.UserMonthrecord;
import com.thinkgem.jeesite.modules.user.entity.UserMonthsum;
import com.thinkgem.jeesite.modules.user.entity.UserWeekplan;
import com.thinkgem.jeesite.modules.user.entity.UserWeekrecord;
import com.thinkgem.jeesite.modules.user.entity.UserWorklog;
import com.thinkgem.jeesite.modules.user.entity.UserWorkrecord;
import com.thinkgem.jeesite.modules.user.entity.to.UserTotalrecords;
import com.thinkgem.jeesite.modules.user.service.UserMonthrecordService;
import com.thinkgem.jeesite.modules.user.service.UserMonthsumService;
import com.thinkgem.jeesite.modules.user.service.UserWeekplanService;
import com.thinkgem.jeesite.modules.user.service.UserWeekrecordService;
import com.thinkgem.jeesite.modules.user.service.UserWorklogService;
import com.thinkgem.jeesite.modules.user.service.UserWorkrecordService;
import com.thinkgem.jeesite.modules.user.service.to.UserTotalrecordsService;

/**
 * 每周计划集合类，没有具体计划细节Controller
 * 
 * @author liuxin
 * @version 2016-11-04
 */
@Controller
@RequestMapping(value = "${adminPath}/user/userWeekplan")
public class UserWeekplanController extends BaseController {
	@Autowired
	private UserWorklogService userWorklogService;
	@Autowired
	private UserWorkrecordService userWorkrecordService;
	@Autowired
	private UserWeekplanService userWeekplanService;
	@Autowired
	private UserWeekrecordService userWeekrecordService;
	@Autowired
	private UserMonthsumService userMonthsumService;
	@Autowired
	private UserMonthrecordService userMonthrecordService;
	@Autowired
	private SystemService systemService;
	@Autowired
	private OfficeService officeService;
	@Autowired
	private OaNotifyService oanotifyservice;// 通告service
	@Autowired
	private UserTotalrecordsService userTotalrecordsService;

	@ModelAttribute
	public UserWeekplan get(@RequestParam(required = false) String id) {
		UserWeekplan entity = null;
		if (StringUtils.isNotBlank(id)) {
			entity = userWeekplanService.get(id);
		}
		if (entity == null) {
			entity = new UserWeekplan();
		}
		return entity;
	}

	@RequestMapping(value = "delete")
	public String deleteuserWorkrecord(UserWeekrecord userWeekrecord, String[] id, Model model,
			RedirectAttributes redirectAttributes, UserWeekplan userWeekplan) {
		if (id.length != 0) {
			for (int i = 0; i < id.length; i++) {
				userWeekrecord.setId(id[i]);
				userWeekrecordService.delete(userWeekrecord);
				UserWeekrecord u = userWeekrecordService.get(userWeekrecord);
				if(userWeekrecordService.getweekPlanList(u).size()==1){
					userWeekplan.setId(u.getWeekplanId());
					userWeekplanService.delete(userWeekplan);}
			}
		}
		addMessage(redirectAttributes, "删除周计划成功");

		return "redirect:" + Global.getAdminPath() + "/user/userWeekplan/?repage";
	}

	/**
	 * 在多表格一同查询时，只需要一个日历值时，只接受前一个日历值。
	 */
	@RequiresPermissions("log:logWorklogOtherList:edit")
	@RequestMapping(value = "seeOtherList")
	public String seeOtherList(Date begindate, Date enddate, String otherUserId, Model model, UserWeekplan userWeekplan,
			UserWeekrecord userWeekrecord, UserMonthsum userMonthsum, UserMonthrecord userMonthrecord,
			HttpServletRequest request, HttpServletResponse response, UserWorkrecord userWorkrecord,
			String otherUserName) {
		if (otherUserId == null || otherUserId.trim().equals("")) {
			otherUserId = UserUtils.getPrincipal().getId();
		}
		Calendar c = Calendar.getInstance();
		if (begindate != null) {
			c.setTime(begindate);
		}
		c.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), 1, 0, 0, 0);
		begindate = c.getTime();
		if (enddate == null) {
			enddate = begindate;
		}
		// 接受查询条件，格式化查询条件时分秒归零，查询月总结，周计划，周计划具体内容，查询用户名称
		userWeekplan.setPlandate(begindate);
		userWeekplan.setCreateBy(new User(otherUserId));
		List<UserWeekplan> list1 = userWeekplanService.findList(userWeekplan);
		List<List<UserWeekrecord>> list2 = new ArrayList<List<UserWeekrecord>>();
		for (UserWeekplan userweekplan : list1) {
			userWeekrecord.setWeekplanId(userweekplan.getId());
			list2.add(userWeekrecordService.findList(userWeekrecord));
		}
		userMonthsum.setSumdate(begindate);
		userMonthsum.setCreateBy(new User(otherUserId));
		List<UserMonthsum> templist = userMonthsumService.findList(userMonthsum);
		if (templist.size() > 0) {
			userMonthsum = templist.get(0);
		} else {
			userMonthsum = null;
		}
		List<UserMonthrecord> userMonthrecords = null;
		if (userMonthsum != null) {
			userMonthrecord.setMonthsumId(userMonthsum.getId());
			userMonthrecords = userMonthrecordService.findList(userMonthrecord);
		}
		model.addAttribute("userMonthsum", userMonthsum);
		model.addAttribute("userMonthrecords", userMonthrecords);
		model.addAttribute("list1", list1);
		model.addAttribute("list2", list2);
		// model.addAttribute("otherUserName",
		// systemService.getUser(otherUserId).getName());
		// 获取工作日志，日志具体内容
		Page<UserWorklog> inpage = new Page<UserWorklog>(request, response);
		inpage.setOrderBy("a.workdate asc");

		Calendar endc = Calendar.getInstance();
		// endc.set(endc.get(Calendar.YEAR), endc.get(Calendar.MONTH),
		// endc.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
		// endc.set(Calendar.MILLISECOND, 0);

		Page<UserWorklog> page = userWorklogService.findPageByDate(inpage, begindate, enddate, otherUserId,
				endc.getTime());
		List<List<UserWorkrecord>> userWorkrecords = new ArrayList<List<UserWorkrecord>>();
		for (UserWorklog userWorklog : page.getList()) {
			userWorkrecord.setWorklogId(userWorklog.getId());
			userWorkrecords.add(userWorkrecordService.findList(userWorkrecord));
		}
		model.addAttribute("otherUserName", systemService.getUser(otherUserId).getName());
		model.addAttribute("page", page);
		model.addAttribute("userWorkrecords", userWorkrecords);
		// 查询部门
		List<Office> offices = officeService.findChildList(UserUtils.getUser().getOffice());
		model.addAttribute("offices", offices);
		// 依据部门，获取人员信息
		List<List<User>> users = new ArrayList<List<User>>();
		for (Office office : offices) {
			users.add(systemService.findUserByOfficeId(office.getId()));
		}
		model.addAttribute("users", users);
		model.addAttribute("begindate", begindate);
		model.addAttribute("enddate", enddate);
		model.addAttribute("otherUserId", otherUserId);
		if (StringUtils.isBlank(otherUserName)) {
			otherUserName = UserUtils.getUser().getName();
		}
		model.addAttribute("otherUserName", otherUserName);
		return "modules/user/seeOtherWeekplanList";
	}

	/**
	 * 
	 * 查询周计划，月度总结，判断是否为第一周，判断是否为新的一周
	 */
	@RequiresPermissions("sys:user:userWorklog:view")
	@RequestMapping(value = { "form", "" })
	public String form(UserWeekplan userWeekplan, UserWeekrecord userWeekrecord, UserMonthsum userMonthsum,
			UserMonthrecord userMonthrecord, Date plandate, Model model) {
		// 开始判断是否要新创建，提供周计划页面表单
		// boolean canUpdate = false;// 能否更新数据
		String canUpdateStr = null;// 能否更新数据的日期
		boolean canInsert = false;// 能够创建新数据
		Calendar c = Calendar.getInstance();// 获得今天的日期
		userWeekplan.setCreateBy(UserUtils.getUser());
		// 星期五 6、星期六 7、星期天 1、 可以写下一周的计划
		// 星期一（2） 到 星期四（5）可以写本周的计划
		// if (c.get(Calendar.DAY_OF_WEEK) == 1 || c.get(Calendar.DAY_OF_WEEK)
		// == 6 || c.get(Calendar.DAY_OF_WEEK) == 7) {
		// 可以写下一周的计划
		// 并且自动控制周一的日期
		userWeekplan.setFirstdate(initFirstdate());
		UserWeekplan newUserWeekplan = null;
		if (userWeekplanService.findCountByPlandate(userWeekplan) == 0) {
			newUserWeekplan = new UserWeekplan();
			// 未创建过下周计划
			canInsert = true;
			// canUpdate = true;
			Calendar cc = Calendar.getInstance();
			cc.setTime(userWeekplan.getFirstdate());
			newUserWeekplan.setFirstdate(userWeekplan.getFirstdate());
			newUserWeekplan.setWeeksign(getWeeksign(cc.get(Calendar.DAY_OF_MONTH)));// 新的日期标志
			cc.set(Calendar.DAY_OF_MONTH, 1);
			newUserWeekplan.setPlandate(cc.getTime());
		} else {
			// 已经创建过下周计划
			canInsert = false;
			// 可以修改，其次通过是否为草稿控制
			// canUpdate = true;
			// 可以修改的日期，其次通过是否为草稿控制
			canUpdateStr = userWeekplan.getFirstdate().getTime() + "";
		}
		// }
		// 确定是否要新创建月度总结，提供面月度总结表单
		boolean canUpdate2 = false;// 能否更新数据
		boolean canInsert2 = false;// 能够创建新数据
		if (c.get(Calendar.DAY_OF_MONTH) == c.getActualMaximum(Calendar.DAY_OF_MONTH)) {
			// 一个月的最后一天
			Calendar ccc = Calendar.getInstance();
			ccc.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), 1, 0, 0, 0);
			userMonthsum.setCreateBy(UserUtils.getUser());
			userMonthsum.setSumdate(ccc.getTime());
			List<UserMonthsum> temp = userMonthsumService.findList(userMonthsum);
			if (temp != null && temp.size() > 0) {
				// 已经有了本月月度总结
				canInsert2 = false;
				canUpdate2 = true;// 可以修改，其次通过是否为草稿控制
			} else {
				// 没有月度总结
				canInsert2 = true;
				canUpdate2 = true;
			}
		}
		// 开始查询
		c.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), 1, 0, 0, 0);
		Date today = c.getTime();
		if (plandate != null) {
			c.setTime(plandate);
		}
		c.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), 1, 0, 0, 0);
		userWeekplan.setPlandate(c.getTime());// 设置查询日期
		List<UserWeekplan> list1 = userWeekplanService.findList(userWeekplan);
		List<List<UserWeekrecord>> list2 = new ArrayList<List<UserWeekrecord>>();
		for (UserWeekplan userweekplan : list1) {
			userWeekrecord.setWeekplanId(userweekplan.getId());
			list2.add(userWeekrecordService.findList(userWeekrecord));
		}
		model.addAttribute("newUserWeekplan", newUserWeekplan);
		model.addAttribute("list1", list1);
		model.addAttribute("list2", list2);
		model.addAttribute("canUpdateStr", canUpdateStr);
		model.addAttribute("canInsert", canInsert);
		model.addAttribute("canUpdate2", canUpdate2);
		model.addAttribute("canInsert2", canInsert2);
		// 查月度总结
		userMonthsum.setSumdate(c.getTime());
		userMonthsum.setCreateBy(UserUtils.getUser());
		List<UserMonthsum> templist = userMonthsumService.findList(userMonthsum);
		if (templist.size() > 0) {
			userMonthsum = templist.get(0);
		} else {
			userMonthsum = null;
		}
		List<UserMonthrecord> userMonthrecords = null;
		if (userMonthsum != null) {
			userMonthrecord.setMonthsumId(userMonthsum.getId());
			userMonthrecords = userMonthrecordService.findList(userMonthrecord);
		}
		model.addAttribute("userMonthsum", userMonthsum);
		model.addAttribute("userMonthrecords", userMonthrecords);
		//
		model.addAttribute("plandate", c.getTime());
		model.addAttribute("isToday", isToday(c.getTime(), today));
		return "modules/user/userWeekplanForm";
	}

	@Autowired
	ActTaskService actTaskService;

	/** 循环保存，提交页面周计划多条记录 */
	@RequiresPermissions("sys:user:userWorklog:edit")
	@RequestMapping(value = "save")
	public String save(String id, String isdraft, Date plandate, String weeksign, Date firstdate, String[] wrid,
			String[] beginday, String[] endday, String[] content, String[] delFlag, String[] deliverables, Model model,
			RedirectAttributes redirectAttributes, UserWeekplan userWeekplan, UserWeekrecord userWeekrecord) {
		userWeekplan.setId(id);
		userWeekplan.setIsdraft(isdraft);
		userWeekplan.setPlandate(plandate);
		userWeekplan.setWeeksign(weeksign);
		userWeekplan.setDelFlag("0");
		userWeekplan.setFirstdate(firstdate);

		userWeekplanService.save(userWeekplan);
		if (delFlag != null) {
			if (userWeekplan.getIsdraft().equals("1")) {
				UUID uuid = UUID.randomUUID();
				String communid = uuid.toString();
				for (int i = 0; i < delFlag.length; i++) {
					User currentUser = userWeekplan.getCurrentUser();
					String processDefinitionKey = "WeeklyPlan";// 流程key
					Map<String, Object> variables = new HashMap<String, Object>();
					variables.put("apply", currentUser.getLoginName());
					String use = UserUtils.get(currentUser.getOffice().getPrimaryPerson().getId()).getLoginName();
					variables.put("applyUserIds", use);
					variables.put("communid", communid);
					if (StringUtils.isBlank(userWeekrecord.getProcInsId())) {
						// 流程关联id为null所以为第一次创建
						userWeekrecord.setProcInsId(actTaskService
								.startProcess(processDefinitionKey, "user_weekrecord", userWeekrecord.getId(),
										"【" + userWeekplan.getCurrentUser().getOffice().getName() + " "
												+ currentUser.getName() + "】周计划【" + DateUtils.getDate() + "】",
										variables));
						// 线程暂停两秒，使得流程流转信息排序正确，防止开始和申请排序颠倒
						try {
							Thread.sleep(2000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						// 执行下一步
						List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
								.taskAssignee(UserUtils.getUser().getLoginName())
								.processInstanceId(userWeekrecord.getProcInsId()).list();
						if (list.size() > 0) {
							actTaskService.complete(list.get(0).getId(), userWeekrecord.getProcInsId(), "【申请】", null,
									variables);
						}
						addMessage(redirectAttributes, "提交周计划成功");
					}
					if (!(delFlag[i].equals("1") && wrid[i].equals("null"))) {
						// 非新创建删除的
						if (wrid[i].equals("null")) {
							wrid[i] = "";
						}
						userWeekrecord.setCommonid(communid);
						userWeekrecord.setId(wrid[i]);
						userWeekrecord.setBeginday(beginday[i]);
						userWeekrecord.setEndday(endday[i]);
						if (content.length == 0) {
							userWeekrecord.setContent("");
						} else {
							userWeekrecord.setContent(content[i]);
						}
						if (deliverables.length == 0) {
							userWeekrecord.setDeliverables("");
						} else {
							userWeekrecord.setDeliverables(deliverables[i]);
						}
						userWeekrecord.setDelFlag(delFlag[i]);
						userWeekrecord.setWeekplanId(userWeekplan.getId());
						userWeekrecordService.save(userWeekrecord);
					}
				}

			} else {
				for (int i = 0; i < delFlag.length; i++) {
					if (!(delFlag[i].equals("1") && wrid[i].equals("null"))) {
						// 非新创建删除的
						if (wrid[i].equals("null")) {
							wrid[i] = "";
						}

						userWeekrecord.setId(wrid[i]);
						userWeekrecord.setBeginday(beginday[i]);
						userWeekrecord.setEndday(endday[i]);
						if (content.length == 0) {
							userWeekrecord.setContent("");
						} else {
							userWeekrecord.setContent(content[i]);
						}
						if (deliverables.length == 0) {
							userWeekrecord.setDeliverables("");
						} else {
							userWeekrecord.setDeliverables(deliverables[i]);
						}
						userWeekrecord.setDelFlag(delFlag[i]);
						userWeekrecord.setWeekplanId(userWeekplan.getId());
						userWeekrecordService.save(userWeekrecord);
					}
					addMessage(redirectAttributes, "保存周计划为草稿成功");
				}

			}

		}

		return "redirect:" + Global.getAdminPath() + "/user/userWeekplan/?repage";

	}


	// 上级领导审核
	@RequestMapping(value = "viewMonthsum")
	public String view(String sameid, UserMonthsum userMonthsum, UserWeekrecord userWeekrecord,
			UserMonthrecord userMonthrecord, UserWeekplan userWeekplan, Model model,
			RedirectAttributes redirectAttributes, Date begindate, Date enddate, String otherUserId,
			HttpServletRequest request, HttpServletResponse response, UserWorkrecord userWorkrecord,
			String otherUserName) {
		String view = "modules/user/userWeekPlanChieView";// 默认去查看页面
		try {		
		List<UserWeekrecord> listOaEnter = userWeekrecordService.comList(sameid);
		
		userWeekplan = userWeekplanService.get(userWeekrecordService.comList(sameid).get(0).getWeekplanId());
		
		String name = UserUtils.get(userWeekplan.getCreateBy().getId()).getName();
		String officeName = UserUtils.get(userWeekplan.getCreateBy().getId()).getOffice().getName();
		model.addAttribute("userWeekplan",
				userWeekplanService.get(userWeekrecordService.comList(sameid).get(0).getWeekplanId()));
		model.addAttribute("name", name);
		model.addAttribute("officeName", officeName);
		model.addAttribute("userWeekrecord", listOaEnter);

		
		if (userWeekrecordService.isDeal(listOaEnter.get(0))) {
			view = "modules/user/userWeekPlanChiefFrom";// 有权限的人去审核页面
		}
		String a = UserUtils.get(userWeekrecord.getCurrentUser().getId()).getOffice().getParentId();
		String ofName = officeService.get(a).getName();
		if (ofName.equals("研发部")) {
			model.addAttribute("turneddownFlag", "1");
		} else {
			model.addAttribute("turneddownFlag", "2");
		}

		addTask(model, listOaEnter.get(0));
		} catch (Exception e) {
			addMessage(redirectAttributes, "该申请数据已丢失，请提醒申请人重新提交周计划申请！");
			return "redirect:" + Global.getAdminPath() + "/act/task/todo/?repage";
		}
		return view;

		
	}

	// 打分
	@RequestMapping(value = "supSave")
	public String supSave(String sameid, UserMonthsum userMonthsum, UserWeekrecord userWeekrecord,
			UserMonthrecord userMonthrecord, UserWeekplan userWeekplan, Model model,
			RedirectAttributes redirectAttributes, Date begindate, Date enddate, String otherUserId,
			HttpServletRequest request, HttpServletResponse response, UserWorkrecord userWorkrecord,
			String otherUserName, String[] wekid, String[] important, String[] schedule) {
		for (int i = 0; i < wekid.length; i++) {
			UserWeekrecord userweekrecord = userWeekrecordService.get(wekid[i]);
			Map<String, Object> vars = new HashMap<String, Object>();
			String examtext = "通过";
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName()).processInstanceId(userweekrecord.getProcInsId())
					.list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), userweekrecord.getProcInsId(), examtext, null, vars);
			}
			userWeekrecord.setId(wekid[i]);
			userWeekrecord.setImportant(important[i]);
			userWeekrecord.setSchedule(schedule[i]);
			userWeekrecord.setProcinsFlag("1");// 记录本周审核完成
			userWeekrecordService.upweek(userWeekrecord);
		}
		addMessage(redirectAttributes, "周计划打分成功");
		return "redirect:" + Global.getAdminPath() + "/act/task/historic/?repage";
	}

	@RequestMapping(value = "supView")
	public String supView(String sameid, UserMonthsum userMonthsum, UserWeekrecord userWeekrecord,
			UserMonthrecord userMonthrecord, UserWeekplan userWeekplan, Model model,
			RedirectAttributes redirectAttributes, Date begindate, Date enddate, String otherUserId,
			HttpServletRequest request, HttpServletResponse response, UserWorkrecord userWorkrecord) {
		userWeekplan = userWeekplanService.get(userWeekrecordService.comList(sameid).get(0).getWeekplanId());
		String name = UserUtils.get(userWeekplan.getCreateBy().getId()).getName();
		String officeName = UserUtils.get(userWeekplan.getCreateBy().getId()).getOffice().getName();
		model.addAttribute("userWeekplan",
				userWeekplanService.get(userWeekrecordService.comList(sameid).get(0).getWeekplanId()));
		model.addAttribute("name", name);
		model.addAttribute("officeName", officeName);
		model.addAttribute("userWeekrecord", userWeekrecordService.comList(sameid));
		model.addAttribute("userWeekrecords", userWeekrecordService.comList(sameid).get(0));

		addTask(model, userWeekrecordService.comList(sameid).get(0));
		return "modules/user/userWeekPlanChieView";
	}

	/** 加入工作台对象，用于显示流程图 */
	private void addTask(Model model, UserWeekrecord userWeekrecord) {
		// 如果流程已启动，给出流程图

		if (userWeekrecord.getProcInsId() != null
				&& userWeekrecordService.getTaskByProcInsId(userWeekrecord.getProcInsId()) != null) {
			model.addAttribute("task", userWeekrecordService.getTaskByProcInsId(userWeekrecord.getProcInsId()));
		}
	}

	/**
	 * 得到本周的标志值12345
	 */
	private String getWeeksign(int day) {
		String weeksign;
		if (day % 7 == 0) {
			weeksign = (day / 7) + "";
		} else {
			weeksign = (day / 7 + 1) + "";
		}
		return weeksign;
	}

	/**
	 * 获取周一的日期
	 */
	private Date initFirstdate() {
		Calendar c = Calendar.getInstance();
		Date date = null;
		c.set(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
		c.set(Calendar.MILLISECOND, 0);
		switch (c.get(Calendar.DAY_OF_WEEK)) {
		case 6:// 星期五
			date = new Date(c.getTime().getTime() + 3 * 86400000);
			break;
		case 7:// 星期六
			date = new Date(c.getTime().getTime() + 2 * 86400000);
			break;
		case 1:// 星期天
			date = new Date(c.getTime().getTime() + 1 * 86400000);
			break;
		case 2:// 星期一
			date = new Date(c.getTime().getTime() + 0 * 86400000);
			break;
		case 3:// 星期二
			date = new Date(c.getTime().getTime() - 1 * 86400000);
			break;
		case 4:// 星期三
			date = new Date(c.getTime().getTime() - 2 * 86400000);
			break;
		case 5:// 星期四
			date = new Date(c.getTime().getTime() - 3 * 86400000);
			break;
		}
		return date;
	}

	/**
	 * 判断是否为今天
	 */
	private boolean isToday(Date queryDate, Date today) {
		if (queryDate.toString().equals(today.toString())) {
			return true;
		}
		return false;
	}

	// 定义流程引擎
	ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();

	@RequestMapping(value = "dispose", method = RequestMethod.POST)
	public String disposeApply(HttpServletRequest request, HttpServletResponse response, Model model,
			RedirectAttributes redirectAttributes, String[] id, UserWeekrecord userWeekrecord, String[] weeksign,
			UserTotalrecords userTotalrecords) {
		UUID uuid = UUID.randomUUID();
		String communid = uuid.toString();
		String processDefinitionKey = "Performance";// 流程key
		List<String> listid = new ArrayList<String>();
		for (int r = 0; r < id.length; r++) {
			if (!listid.contains(id[r])) {
				listid.add(id[r]);
			}
		}
		List<UserWeekrecord> list = new ArrayList<UserWeekrecord>();
		for (int k = 0; k < listid.size(); k++) {
			List<UserWeekrecord> UserWeekrecordlist = userWeekrecordService.comList(listid.get(k));
			for (int z = 0; z < UserWeekrecordlist.size(); z++) {
				list.add(UserWeekrecordlist.get(z));
			}
		}
		for (int i = 0; i < list.size(); i++) {
			User currentUser = userWeekrecord.getCurrentUser();
			Map<String, Object> variables = new HashMap<String, Object>();
			String a = UserUtils.get(userWeekrecord.getCurrentUser().getId()).getOffice().getParentId();
			String ofName = officeService.get(a).getName();
			if (ofName.equals("研发部")) {
				Office of = officeService.get(officeService.findOfficeIdByName("质量保障组"));
				String name = UserUtils.get(of.getPrimaryPerson().getId()).getLoginName();
				variables.put("apply", currentUser.getLoginName());
				variables.put("cz", true);
				variables.put("precommonid", communid);
				variables.put("applyUserIds", name);
			} else {
				String name = UserUtils.get(officeService.get(a).getPrimaryPerson().getId()).getLoginName();
				variables.put("apply", currentUser.getLoginName());
				variables.put("cz", false);
				variables.put("precommonid", communid);
				variables.put("c", true);
				variables.put("applyUserIds", name);
				userWeekrecord = new UserWeekrecord();
				userWeekrecord.setId(list.get(i).getId());
				Integer y = (int) (Integer.parseInt(list.get(i).getSchedule()));
				BigDecimal beichushu = new BigDecimal(list.get(i).getImportant());
				double l = beichushu.doubleValue();
				userWeekrecord.setTestScore(String.valueOf(l * y));// 任务分
				userWeekrecordService.upqualityscore(userWeekrecord);
			}
			if (StringUtils.isBlank(userWeekrecord.getProcInsIdPre())) {
				// 流程关联id为null所以为第一次创建
				userWeekrecord.setProcInsIdPre(actTaskService.startProcess(processDefinitionKey, "user_weekrecord",
						userWeekrecord.getProcInsIdPre(),
						"【 " +ofName + "】月绩效考核【" + DateUtils.getDate() + " 】", variables));
				// 线程暂停两秒，使得流程流转信息排序正确，防止开始和申请排序颠倒
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				// 执行下一步
				List<Task> listi = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
						.taskAssignee(UserUtils.getUser().getLoginName())
						.processInstanceId(userWeekrecord.getProcInsIdPre()).list();
				if (listi.size() > 0) {
					actTaskService.complete(listi.get(0).getId(), userWeekrecord.getProcInsIdPre(), "【申请】", null,
							variables);
				}
			}
			// User currentUser = userWeekrecord.getCurrentUser();
			// Map<String, Object> variables = new HashMap<String, Object>();
			// variables.put("apply", currentUser.getLoginName());
			// variables.put("precommonid", communid);
			// ProcessInstance pi =
			// processEngine.getRuntimeService().startProcessInstanceByKey(processDefinitionKey,variables);
			// Task task = processEngine.getTaskService()// 与正在执行的任务管理相关的service
			// .createTaskQuery()// 创建任务查询对象
			// .processInstanceId(pi.getId())// 使用流程实例ID查询
			// .singleResult(); // 返回唯一的结果集
			// // 任务拾取
			// processEngine.getTaskService().claim(task.getId(),
			// currentUser.getLoginName());
			// Map<String, Object> variabless = new HashMap<String, Object>();
			// variabless.put("applyUserIds", "guowen");
			// variabless.put("precommonid", communid);
			// String title="【 "+currentUser.getOffice().getName()+"】月计划计划【"+
			// DateUtils.getDate()+" 】";
			// actTaskService.complete(task.getId(),pi.getId(),"",title,
			// variabless);
			userWeekrecord.setId(list.get(i).getId());
			// userWeekrecord.setProcInsIdPre(pi.getId());
			userWeekrecord.setPreCommonid(communid);
			userWeekrecord.setToProcinsFlag("1");// 提交审核
			userWeekrecordService.upPrecomid(userWeekrecord);
		}
		String a = UserUtils.get(userWeekrecord.getCurrentUser().getId()).getOffice().getParentId();
		String ofName = officeService.get(a).getName();
		if (!ofName.equals("研发部")) {
			for (int j = 0; j < weeksign.length; j++) {
				UserWeekrecord user = new UserWeekrecord();
				user.setPreCommonid(communid);
				user.setWeeksign(weeksign[j]);
				List<Map<String, Object>> map = userWeekrecordService.sum(user);
				for (int l = 0; l < map.size(); l++) {
					Object sum = map.get(l).get("sum");
					// }
					// for (Map<String, Object> map2 : map) {
					// Object sum = map2.get("sum");
					String sumi = sum.toString().substring(0, sum.toString().lastIndexOf("."));
					Integer k = weeksign.length;
					Integer d = Integer.valueOf(sumi);
					userTotalrecords.setAvgScore(String.valueOf(d / k));
					userTotalrecords.setUserId(map.get(l).get("nameid").toString());
					userTotalrecords.setWeeksign(map.get(l).get("week").toString());
					userTotalrecords.setSumScore(sumi);
					userTotalrecords.setPreCommonid(
							userWeekrecordService.getprecomidListID(list.get(0).getId()).getPreCommonid());
					userTotalrecordsService.inserti(userTotalrecords);
				}
			}
		}
		addMessage(redirectAttributes, "提交部门月绩效考核成功");
		return "redirect:" + Global.getAdminPath() + "/oa/cyTspOaMonthlyPlan/?repage";

	}

	// 测试部门审核
	@RequestMapping(value = "testExam", method = RequestMethod.POST)
	public String testExam(HttpServletRequest request, HttpServletResponse response, Model model,
			RedirectAttributes redirectAttributes, CyTspOaMonthlyPlan cyTspOaMonthlyPlan, OaNotify oanotify,
			Office office, String[] id, UserWeekrecord userWeekrecord, String[] qualityScore, String[] weeksign,
			UserTotalrecords userTotalrecords) {
		try {		
		for (int i = 0; i < id.length; i++) {
			UserWeekrecord userweekrecord = userWeekrecordService.getprecomidListID(id[i]);
			if (userweekrecord.getTurndownFlag() != null) {
				UserWeekrecord uw = new UserWeekrecord();
				uw.setId(id[i]);
				userWeekrecordService.upturndownflag(uw);
			}
			User use = new User();
			use.setId(userweekrecord.getCreateByid());
			String c = UserUtils.get(use.getId()).getOffice().getParentId();
			Office off = officeService.get(c);
			String name = UserUtils.get(off.getPrimaryPerson().getId()).getLoginName();
			Map<String, Object> vars = new HashMap<String, Object>();
			vars.put("applyUserIds", name);
			vars.put("commonid", userweekrecord.getPreCommonid());
			String examtext = "通过";
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName())
					.processInstanceId(userweekrecord.getProcInsIdPre()).list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), userweekrecord.getProcInsIdPre(), examtext, null, vars);
			}
			userWeekrecord.setId(id[i]);
			// 权重*(进度分*60%+质量分*40%)
			Integer y = (int) (Integer.parseInt(userweekrecord.getSchedule()) * 0.6);
			Integer z = (int) (Integer.parseInt(qualityScore[i]) * 0.4);
			BigDecimal beichushu = new BigDecimal(userweekrecord.getImportant());
			double l = beichushu.doubleValue();

			userWeekrecord.setTestScore(String.valueOf(l * (z + y)));// 任务分
			userWeekrecord.setQualityScore(qualityScore[i]);
			userWeekrecordService.upqualityscore(userWeekrecord);
		}
		for (int j = 0; j < weeksign.length; j++) {
			UserWeekrecord user = new UserWeekrecord();
			user.setPreCommonid(userWeekrecordService.getprecomidListID(id[1]).getPreCommonid());
			user.setWeeksign(weeksign[j]);
			List<Map<String, Object>> map = userWeekrecordService.sum(user);
			for (Map<String, Object> map2 : map) {
				Object sum = map2.get("sum");
				String a = sum.toString();
				String sumi = a.substring(0, a.lastIndexOf("."));
				Integer k = weeksign.length;
				Integer d = Integer.valueOf(sumi);
				userTotalrecords.setAvgScore(String.valueOf(d / k));
				userTotalrecords.setUserId(map2.get("nameid").toString());
				userTotalrecords.setWeeksign(map2.get("week").toString());
				userTotalrecords.setSumScore(sumi);
				userTotalrecords.setPreCommonid(userWeekrecordService.getprecomidListID(id[0]).getPreCommonid());
				userTotalrecordsService.inserti(userTotalrecords);
			}
		}
		addMessage(redirectAttributes, "部门月绩效考核成功");
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return "redirect:" + Global.getAdminPath() + "/act/task/historic";
	}

	// 部门副总审核
	@RequestMapping(value = "toExam", method = RequestMethod.POST)
	public String toExam(HttpServletRequest request, HttpServletResponse response, Model model,
			RedirectAttributes redirectAttributes, String isdraft, String[] id, UserWeekrecord userWeekrecord,
			String Fruit, String turndownId) {
		for (int i = 0; i < id.length; i++) {
			UserWeekrecord userweekrecord = userWeekrecordService.getprecomidListID(id[i]);
			Map<String, Object> vars = new HashMap<String, Object>();
			String examtext = "";
			if (isdraft.equals("0")) {
				examtext = "通过";
				vars.put("flag", true);
				UserWeekrecord	uw=new UserWeekrecord();
				uw.setId(id[i]);
				userWeekrecordService.upProcinsFlag(uw);
			} else {
				if (Fruit.equals("2")) {
					// 驳回至小组部门
					Office of = officeService.get(officeService.findOfficeIdByName(
							UserUtils.get(userWeekplanService.get(userweekrecord.getWeekplanId()).getCreateBy().getId())
									.getOffice().getName()));
					String name = UserUtils.get(of.getPrimaryPerson().getId()).getLoginName();
					vars.put("applyUserIds", name);
					vars.put("commonid", userweekrecord.getPreCommonid());
					examtext = "驳回修改进度分";
					vars.put("flag", "2");
					UserWeekrecord uw = new UserWeekrecord();
					if (turndownId.equals('0')) {
						uw.setId(id[i]);
						uw.setTurndownFlag("1");
						userWeekrecordService.upturndownId(uw);
					} else {
						String[] td = turndownId.split(",");
						for (int k = 0; k < td.length; k++) {
							uw.setId(td[k]);
							uw.setTurndownFlag("1");
							userWeekrecordService.upturndownId(uw);
						}
					}
					userWeekrecordService.upturndownId(userweekrecord);
				} else if (Fruit.equals("1")) {
					vars.put("commonid", userweekrecord.getPreCommonid());
					examtext = "驳回修改质量分";
					Office of = officeService.get(officeService.findOfficeIdByName("质量保障组"));
					String name = UserUtils.get(of.getPrimaryPerson().getId()).getLoginName();
					vars.put("applyUserIds", name);
					vars.put("flag", "1");
					UserWeekrecord uw = new UserWeekrecord();
					if (turndownId.equals('0')) {
						uw.setId(id[i]);
						uw.setTurndownFlag("1");
						userWeekrecordService.upturndownId(uw);
					} else {
						String[] td = turndownId.split(",");
						for (int k = 0; k < td.length; k++) {
							uw.setId(td[k]);
							uw.setTurndownFlag("1");
							userWeekrecordService.upturndownId(uw);
						}
					}
				}
			}

			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName())
					.processInstanceId(userweekrecord.getProcInsIdPre()).list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), userweekrecord.getProcInsIdPre(), examtext, null, vars);
			}
		}
		UserWeekrecord userweekrecord = userWeekrecordService.getprecomidListID(id[0]);
		if(Fruit!=null){
		if (Fruit.equals("2")) {
			Task ta = TaskUtil.task(userweekrecord.getProcInsIdPre());
			Office of = officeService.get(officeService.findOfficeIdByName(
					UserUtils.get(userWeekplanService.get(userweekrecord.getWeekplanId()).getCreateBy().getId())
							.getOffice().getName()));
			OaNotify oanotify = new OaNotify();
			oanotify.setTitle("【月绩效考核】" + "-【驳回修改进度分】");// 标题
			oanotify.setType("4");// 设置成协同通知
			oanotify.setStatus("1");
			oanotify.setOaNotifyRecordIds(UserUtils.get(of.getPrimaryPerson().getId()).getId());// 通知
			oanotify.setContent("@@proNotify@@/oa/a/oa/cyTspOaMonthlyPlan/rejected?sameid=" + ta.getDescription());
			oanotifyservice.save(oanotify);
		} else if (Fruit.equals("1")) {
			Task ta = TaskUtil.task(userweekrecord.getProcInsIdPre());
			Office of = officeService.get(officeService.findOfficeIdByName("质量保障组"));
			OaNotify oanotify = new OaNotify();
			oanotify.setTitle("【月绩效考核】" + "-【驳回修改质量分】");// 标题
			oanotify.setType("4");// 设置成协同通知
			oanotify.setStatus("1");
			oanotify.setOaNotifyRecordIds(UserUtils.get(of.getPrimaryPerson().getId()).getId());// 通知
			oanotify.setContent("@@proNotify@@/oa/a/oa/cyTspOaMonthlyPlan/test?sameid=" + ta.getDescription());
			oanotifyservice.save(oanotify);
		}
		}
		if ((isdraft.equals("0"))) {
			addMessage(redirectAttributes, "保存部门月绩效考核成功");
		} else {
			addMessage(redirectAttributes, "驳回部门月绩效考核成功");
		}

		return "redirect:" + Global.getAdminPath() + "/act/task/historic";
	}

	// 驳回申请人重新打分提交
	@RequestMapping(value = "rejecteExam", method = RequestMethod.POST)
	public String proposer(HttpServletRequest request, HttpServletResponse response, Model model,
			RedirectAttributes redirectAttributes, String isdraft, String[] id, UserWeekrecord userWeekrecord,
			String Fruit, String[] schedule, String[] weeksign, UserTotalrecords userTotalrecords) {
		for (int i = 0; i < id.length; i++) {
			userWeekrecord.setSchedule(schedule[i]);
			userWeekrecord.setId(id[i]);
			userWeekrecordService.UPschedule(userWeekrecord);
			UserWeekrecord userweekrecords = userWeekrecordService.getprecomidListID(id[i]);
			// if (userweekrecords.getTurndownFlag() != null) {
			// UserWeekrecord uw = new UserWeekrecord();
			// uw.setId(id[i]);
			// userWeekrecordService.upturndownflag(uw);
			// }
			Map<String, Object> variables = new HashMap<String, Object>();
			String a = UserUtils.get(userWeekrecord.getCurrentUser().getId()).getOffice().getParentId();
			String ofName = officeService.get(a).getName();
			if (ofName.equals("研发部")) {
				Office of = officeService.get(officeService.findOfficeIdByName("质量保障组"));
				String name = UserUtils.get(of.getPrimaryPerson().getId()).getLoginName();
				variables.put("cz", true);
				variables.put("precommonid", userweekrecords.getPreCommonid());
				variables.put("applyUserIds", name);
			} else {
				String name = UserUtils.get(officeService.get(a).getPrimaryPerson().getId()).getLoginName();
				variables.put("cz", false);
				variables.put("precommonid", userweekrecords.getPreCommonid());
				variables.put("applyUserIds", name);
				userWeekrecord.setId(id[i]);
				Integer y = (int) (Integer.parseInt(userweekrecords.getSchedule()));
				BigDecimal beichushu = new BigDecimal(userweekrecords.getImportant());
				double l = beichushu.doubleValue();
				userWeekrecord.setTestScore(String.valueOf(l * y));// 任务分
				userWeekrecordService.upqualityscore(userWeekrecord);

			}

			String examtext = "重新申请";
			List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
					.taskAssignee(UserUtils.getUser().getLoginName())
					.processInstanceId(userweekrecords.getProcInsIdPre()).list();
			if (list.size() > 0) {
				actTaskService.complete(list.get(0).getId(), userweekrecords.getProcInsIdPre(), examtext, null,
						variables);
			}
		}
		for (int j = 0; j < weeksign.length; j++) {
			UserWeekrecord user = new UserWeekrecord();
			user.setWeeksign(weeksign[j]);
			List<Map<String, Object>> map = userWeekrecordService.sum(user);
			for (Map<String, Object> map2 : map) {
				Object sum = map2.get("sum");
				String sumi = sum.toString().substring(0, sum.toString().lastIndexOf("."));
				Integer k = weeksign.length;
				Integer d = Integer.valueOf(sumi);
				userTotalrecords.setAvgScore(String.valueOf(d / k));
				userTotalrecords.setUserId(map2.get("nameid").toString());
				userTotalrecords.setWeeksign(map2.get("week").toString());
				userTotalrecords.setSumScore(sumi);
				userTotalrecords.setPreCommonid(userWeekrecordService.getprecomidListID(id[0]).getPreCommonid());
				userTotalrecordsService.inserti(userTotalrecords);
			}
		}
		// UserTotalrecords us=new UserTotalrecords();
		// us.setPreCommonid(userWeekrecordService.getprecomidListID(id[0]).getPreCommonid());
		// userTotalrecordsService.delete(us);
		addMessage(redirectAttributes, "提交月绩效考核成功");
		return "redirect:" + Global.getAdminPath() + "/act/task/historic";
	}

}