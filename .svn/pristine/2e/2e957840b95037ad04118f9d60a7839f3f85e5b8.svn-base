/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.mobile.modules.oa.web;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.annotation.Token;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.act.entity.Act;
import com.thinkgem.jeesite.modules.act.service.ActTaskService;
import com.thinkgem.jeesite.modules.oa.entity.OaSealUse;
import com.thinkgem.jeesite.modules.oa.service.OaSealUseService;
import com.thinkgem.jeesite.modules.oa.service.coding.OaProVacateService;
import com.thinkgem.jeesite.modules.sys.service.OfficeService;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.OrdersUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.user.service.UserFavoriteService;

/**
 * 印章借用流程表Controller
 * 
 * @author niting
 * @version 2016-12-13
 */
@Controller(value="moaSealUseController")
@RequestMapping(value = "${adminPath}${mobilePath}/oa/oaSealUse")
public class OaSealUseController extends BaseController {

	@Autowired
	private OaSealUseService oaSealUseService;
	@Autowired
	private OaProVacateService oaProVacateService;
	@Autowired
	private SystemService systemService;
	@Autowired
	private OfficeService officeService;
	@Autowired
	private ActTaskService actTaskService;

	@ModelAttribute
	public OaSealUse get(@RequestParam(required = false) String id) {
		OaSealUse entity = null;
		if (StringUtils.isNotBlank(id)) {
			entity = oaSealUseService.get(id);
		}
		if (entity == null) {
			entity = new OaSealUse();
		}
		return entity;
	}

	@RequiresPermissions("oa:oaSealUse:view")
	@RequestMapping(value = { "list", "" })
	public String list(OaSealUse oaSealUse, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<OaSealUse> page = oaSealUseService.findPage(new Page<OaSealUse>(request, response), oaSealUse);
		model.addAttribute("page", page);
		return "mobile/modules/oa/oaSealUseList";
	}

	@RequiresPermissions("oa:oaSealUse:edit")
	@RequestMapping(value = "delete")
	public String delete(OaSealUse oaSealUse, RedirectAttributes redirectAttributes) {
		oaSealUseService.delete(oaSealUse);
		addMessage(redirectAttributes, "删除印章使用成功");
		return "redirect:" + Global.getAdminPath() + Global.getMobilePath() + "/oa/oaSealUse/?repage";
	}

	/**
	 * 新建，打回，页面
	 */
	@RequiresPermissions("oa:oaSealUse:view")
	@RequestMapping(value = "form")
	@Token(save = true)
	public String form(OaSealUse oaSealUse, Model model, String flag) {
		oaSealUse = init(oaSealUse);//流程结束后获取实体对象
		String view = "mobile/modules/oa/oaSealUseView";
		if (oaSealUseService.isDeal(oaSealUse) && !"view".equals(flag)) {
			view = "mobile/modules/oa/oaSealUseForm";
		} else {
			oaSealUse.setCreateBy(systemService.getUser(oaSealUse.getCreateBy().getId()));// 为页面查询出申请人的名字
		}
			
		//若id为空申请人和申请时间赋值
		if (StringUtils.isBlank(oaSealUse.getId())) {
			oaSealUse.setCreateBy(UserUtils.getUser());
			oaSealUse.setCreateDate(new Date());
		}

		//审核完成后打回创建人是空值，重新赋值
		if(oaSealUse.getCreateBy().getName()==null){
			oaSealUse.setCreateBy(UserUtils.getUser());
		}
		
		//如果申请时，部门显示的是小组名字，则显示小组名字的上级名字。如显示的是oa组，则显示研发部	
		oaSealUse.setOfficeName(officeService.get(UserUtils.getUser().getOffice().getId()).getName());
		String officeid = officeService.get(officeService.findOfficeIdByName(oaSealUse.getOfficeName())).getParentId();
		if(!officeid.equals("0") && !officeid.equals("1")){
			oaSealUse.setOfficeName(officeService.get(UserUtils.getUser().getOffice().getParentId()).getName());
		}

		model.addAttribute("oaSealUse", oaSealUse);
		addShoucang(oaSealUse.getId(), model);
		addTitle(model, oaSealUse);
		addTask(model, oaSealUse);
		addt(model,oaSealUse);
		return view;
	}

	/**
	 * 新建提交，打回修改提交
	 * 
	 * flag 0 确定申请 1 取消申请
	 */
	@RequiresPermissions("oa:oaSealUse:edit")
	@RequestMapping("save")
	@Token(remove = true)
	public String save(OaSealUse oaSealUse, Model model, RedirectAttributes redirectAttributes, String flag) {
		if (!beanValidator(model, oaSealUse)) {
			return form(oaSealUse, model, "");
		}
		oaSealUse.setFileId(OrdersUtils.getGenerateOrderNo8("CY_YZ"));//自动生成编号
		oaSealUseService.save(oaSealUse, flag);
		if(flag.equals("1")){
			addMessage(redirectAttributes, "印章使用申请取消");
		}else{
			addMessage(redirectAttributes, "印章使用申请成功");
		}
		return "redirect:" + Global.getAdminPath() + Global.getMobilePath() + "/oa/oaSealUse/form?id=" + oaSealUse.getId();
	}

	/**
	 * 上级审核页面
	 */
	@RequiresPermissions("oa:oaSealUse:view")
	@RequestMapping("exam")
	@Token(save = true)
	public String exam(OaSealUse oaSealUse, Model model, int num) {
		oaSealUse = init(oaSealUse);
		oaSealUse.setCreateBy(UserUtils.get(oaSealUse.getCreateBy().getId()));// 为页面查询出申请人的名字
		model.addAttribute("oaSealUse", oaSealUse);
		String view = "mobile/modules/oa/oaSealUseView";// 默认去查看页面
		if (oaSealUseService.isDeal(oaSealUse)) {
			view = "mobile/modules/oa/oaSealUseExam" + num;// 有权限的人去审核页面
		}
		addShoucang(oaSealUse.getId(), model);
		addTitle(model, oaSealUse);
		addTask(model, oaSealUse);
		addt(model,oaSealUse);
		return view;
	}

	/**
	 * 审核是否通过 0：不同意 1：同意
	 */
	@RequiresPermissions("oa:oaSealUse:edit")
	@RequestMapping("dealExam")
	@Token(remove = true)
	public String dealexam(OaSealUse oaSealUse, Model model, RedirectAttributes redirectAttributes, String exam,
			int sign) {
		if (!beanValidator(model, oaSealUse)) {
			return exam(oaSealUse, model, sign);
		}
		oaSealUseService.dealexam(oaSealUse, exam, sign);
		addMessage(redirectAttributes, "审核印章使用申请成功");
		return "redirect:" + Global.getAdminPath() + Global.getMobilePath() + "/oa/oaSealUse/form?id=" + oaSealUse.getId();
	}

	/**
	 * 流程结束后的获取实体对象的方法
	 * 
	 */
	private OaSealUse init(OaSealUse oaSealUse) {
		if (oaSealUse.getAct() != null && StringUtils.isNotBlank(oaSealUse.getAct().getProcInsId())) {
			oaSealUse = oaSealUseService.getByProcInsId(oaSealUse.getAct().getProcInsId());
		}
		return oaSealUse;
	}

	/** 加入流程标题 */
	private void addTitle(Model model, OaSealUse oaSealUse) {
		String name = null;
		String date = null;
		if (StringUtils.isNotBlank(oaSealUse.getId())) {
			name = UserUtils.get(oaSealUse.getCreateBy().getId()).getName();
			date = DateUtils.formatDate(oaSealUse.getCreateDate());
		} else {
			name = UserUtils.getUser().getName();
			date = DateUtils.getDate();
		}
		model.addAttribute("title", "印章申请流程【" + name + " " + date + "】");
	}

	/** 加入工作台对象，用于显示流程图 */
	private void addTask(Model model, OaSealUse oaSealUse) {
		// 如果流程已启动，给出流程图
		if (oaSealUse.getProcInsId() != null
				&& oaProVacateService.getTaskByProcInsId(oaSealUse.getProcInsId()) != null) {
			model.addAttribute("task", oaProVacateService.getTaskByProcInsId(oaSealUse.getProcInsId()));
		}
	}
	
	/** 微信端流程流转信息的显示 */
	private void addt(Model model, OaSealUse oaSealUse){
		if(StringUtils.isNotBlank(oaSealUse.getProcInsId())){
			List<Act> listact = actTaskService.histoicFlowList(oaSealUse.getProcInsId(), null, null);
			model.addAttribute("listact",listact);
		}
	}
	
	@Autowired
	private UserFavoriteService UserFavoriteService;// 获取当前流程信息是否已经被收藏

	/** 获取当前物质收藏状态 */
	public void addShoucang(String id, Model model) {
		if (StringUtils.isNotBlank(id)) {
			model.addAttribute("shoucang", UserFavoriteService.getShoucangState(id));
		}
	}
}