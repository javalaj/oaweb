/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.oa.service.contract;

import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.activiti.engine.task.Task;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Maps;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.CrudService;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.oa.entity.contract.OaContractPurchase;
import com.thinkgem.jeesite.modules.oa.entity.contract.OaContractPurchasePayApproval;
import com.thinkgem.jeesite.modules.oa.entity.contract.OaContractPurchaseStage;
import com.thinkgem.jeesite.modules.oa.entity.contract.OaContractSales;
import com.thinkgem.jeesite.modules.oa.entity.emp.OaEmpJoinApproval;
import com.thinkgem.jeesite.modules.oa.entity.project.OaProject;
import com.thinkgem.jeesite.modules.oa.service.project.OaProjectService;
import com.thinkgem.jeesite.modules.sys.utils.OrdersUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.sys.utils.WorkflowUtils;
import com.thinkgem.jeesite.modules.act.service.ActTaskService;
import com.thinkgem.jeesite.modules.oa.dao.contract.OaContractPurchasePayApprovalDao;

/**
 * 采购合同付款申请审批管理Service
 * @author 李廷龙
 * @version 2016-12-12
 */
@Service
@Transactional(readOnly = true)
public class OaContractPurchasePayApprovalService extends CrudService<OaContractPurchasePayApprovalDao, OaContractPurchasePayApproval> {

	@Autowired
	private ActTaskService actTaskService;
	@Autowired
	private OaContractPurchaseStageService oaContractPurchaseStageService;
	@Autowired
	private OaContractPurchaseService oaContractPurchaseService;
	
	@Autowired
	private OaContractSalesService oaContractSalesService;
	
	@Autowired
	private OaProjectService oaProjectService;
	
	public static final String PROC_DEF_KEY = "oa_contract_purchase_pay_approval";
	public static final String BUSINESS_TABLE = "oa_contract_purchase_pay_approval";
	
	public OaContractPurchasePayApproval get(String id) {
		return super.get(id);
	}
	public OaContractPurchasePayApproval getByProcInsId(String procInsId){
		return dao.getByProcInsId(procInsId);
	}
	
	public OaContractPurchasePayApproval getByOaContractPurchaseStageId(String oaContractPurchaseStageId) {
		return dao.getByOaContractPurchaseStageId(oaContractPurchaseStageId);
	}
	
	public List<OaContractPurchasePayApproval> findList(OaContractPurchasePayApproval oaContractPurchasePayApproval) {
		return super.findList(oaContractPurchasePayApproval);
	}
	
	public Page<OaContractPurchasePayApproval> findPage(Page<OaContractPurchasePayApproval> page, OaContractPurchasePayApproval oaContractPurchasePayApproval) {
		return super.findPage(page, oaContractPurchasePayApproval);
	}
	
	@Transactional(readOnly = false)
	public String saveApproval(OaContractPurchasePayApproval approval) {
		if (StringUtils.equals("save", approval.getAct().getFlag())) {
			if (!StringUtils.equals("1", approval.getIsStart())) {
				approval.setStatus("0");
			}
			//保存
			super.save(approval);
			return "[采购合同付款申请][信息保存]操作已完成";
		}else{
			//处理
			if (StringUtils.isBlank(approval.getId())||!StringUtils.equals("1", approval.getIsStart())) {
				approval.setApplyDate(new Date());
				approval.setApplicant(UserUtils.getUser());
				
				approval.setStatus("1");
				approval.setIsStart("1");
				approval.setPayApprovalNo(OrdersUtils.getGenerateOrderNo12("CPSG"));
				super.save(approval);
				String procDefKey = PROC_DEF_KEY;
				String businessTable = BUSINESS_TABLE;
				String businessId = approval.getId();
				String title = "[采购合同付款申请]";
				String procInsId = actTaskService.startProcess(procDefKey, businessTable, businessId, title);
				String comment = "[采购合同付款申请]";
				List<Task> list = actTaskService.getProcessEngine().getTaskService().createTaskQuery()
						.processInstanceId(procInsId).list();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				if (list.size() > 0) {
					String taskId = list.get(0).getId();
					Map<String, Object> vars = Maps.newHashMap();
					vars.put("apply", UserUtils.getUser().getLoginName());
					//阶段id
					String oaContractPurchaseStageId=approval.getOaContractPurchaseStage().getId();
					//通过阶段id找到阶段实体
					OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(oaContractPurchaseStageId);
					//通过阶段实体中的采购合同id找到采购合同实体
					OaContractPurchase oaContractPurchase=oaContractPurchaseService.get(oaContractPurchaseStage.getContractPurchase().getId());
					//通过采购合同实体中的项目id找到项目实体
					OaProject oaProject=oaProjectService.get(oaContractPurchase.getProject().getId());
					vars.put("exam2", oaProject.getAccountManager().getLoginName());
					vars.put("exam2s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam2s", ""));
					vars.put("flag", "true");
					actTaskService.complete(taskId, procInsId, comment, title, vars);
				}
				
				OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(approval.getOaContractPurchaseStage().getId());
				oaContractPurchaseStage.setPayStageStatus("1");
				oaContractPurchaseStageService.save(oaContractPurchaseStage);
				return "[采购合同付款申请][提交]操作已完成";
				
			} else {
				if (!approval.getAct().isFinishTask()) {
					
					Map<String, Object> vars = Maps.newHashMap();
					vars.put("flag", approval.getAct().getFlag());
					String taskId = approval.getAct().getTaskId();
					String procInsId = approval.getAct().getProcInsId();
					String comment = "default comment";
					String title = "[采购合同付款申请]";
					
					String taskDefKey = approval.getAct().getTaskDefKey();
					if ("exam1".equals(taskDefKey)) {
						approval.setApplyDate(new Date());
						approval.setApplicant(UserUtils.getUser());
						comment = resultComment(approval, "重新申请", "销毁申请", "");
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							//阶段id
							String oaContractPurchaseStageId=approval.getOaContractPurchaseStage().getId();
							//通过阶段id找到阶段实体
							OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(oaContractPurchaseStageId);
							//通过阶段实体中的采购合同id找到采购合同实体
							OaContractPurchase oaContractPurchase=oaContractPurchaseService.get(oaContractPurchaseStage.getContractPurchase().getId());
							//通过采购合同实体中的项目id找到项目实体
							OaProject oaProject=oaProjectService.get(oaContractPurchase.getProject().getId());
							vars.put("exam2", oaProject.getAccountManager().getLoginName());
							vars.put("exam2s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam2s", ""));
							approval.setStatus("1");
						}else{
							approval.setStatus("x");
						}
					} else if ("exam2".equals(taskDefKey)) {
						String opinion = approval.getAccountmanageropinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							//阶段id
							String oaContractPurchaseStageId=approval.getOaContractPurchaseStage().getId();
							//通过阶段id找到阶段实体
							OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(oaContractPurchaseStageId);
							//通过阶段实体中的采购合同id找到采购合同实体
							OaContractPurchase oaContractPurchase=oaContractPurchaseService.get(oaContractPurchaseStage.getContractPurchase().getId());
							//通过采购合同实体中的项目id找到项目实体
							OaProject oaProject=oaProjectService.get(oaContractPurchase.getProject().getId());
							vars.put("exam3", oaProject.getBusinessManager().getLoginName());
							vars.put("exam3s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam3s", ""));
							approval.setStatus("2");
						}else{
							approval.setStatus("z");
						}
					} else if ("exam3".equals(taskDefKey)) {
						String opinion = approval.getBusinessDeptLinkmanOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							//阶段id
							String oaContractPurchaseStageId=approval.getOaContractPurchaseStage().getId();
							//通过阶段id找到阶段实体
							OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(oaContractPurchaseStageId);
							//通过阶段实体中的采购合同id找到采购合同实体
							OaContractPurchase oaContractPurchase=oaContractPurchaseService.get(oaContractPurchaseStage.getContractPurchase().getId());
							//通过采购合同实体中的销售合同id找到销售合同实体
							OaContractSales oaContractSales=oaContractSalesService.get(oaContractPurchase.getContractSales().getId());
							vars.put("exam4", oaContractSales.getProjectLeader().getLoginName());
							vars.put("exam4s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam4s", ""));
							approval.setStatus("3");
						}else{
							approval.setStatus("1");
						}
					} else if ("exam4".equals(taskDefKey)) {
						
						String opinion = approval.getProjectManagerOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam5", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam5", ""));
							vars.put("exam5s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam5s", ""));
							approval.setStatus("4");
						}else{
							approval.setStatus("2");
						}
					} else if ("exam5".equals(taskDefKey)) {
						String opinion = approval.getFinanceDeptPaymentRequest();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam6", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam6", ""));
							vars.put("exam6s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam6s", ""));
							approval.setStatus("5");
						}else{
							approval.setStatus("3");
						}
					} else if ("exam6".equals(taskDefKey)) {
						String opinion = approval.getEngineeringDeptManagerOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam7", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam7", ""));
							vars.put("exam7s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam7s", ""));
							approval.setStatus("6");
						}else{
							approval.setStatus("4");
						}
					} else if ("exam7".equals(taskDefKey)) {
						String opinion = approval.getTechDeptVicePresidentOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam8", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam8", ""));
							vars.put("exam8s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam8s", ""));
							approval.setStatus("7");
						}else{
							approval.setStatus("5");
						}
					} else if ("exam8".equals(taskDefKey)) {
						String opinion = approval.getBusinessManagerOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam9", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam9", ""));
							vars.put("exam9s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam9s", ""));
							approval.setStatus("8");
						}else{
							approval.setStatus("6");
						}
					} else if ("exam9".equals(taskDefKey)) {
						String opinion = approval.getBusinessDeptVicePresidentOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam10", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam10", ""));
							vars.put("exam10s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam10s", ""));
							approval.setStatus("9");
						}else{
							approval.setStatus("7");
						}
					} else if ("exam10".equals(taskDefKey)) {
						String opinion = approval.getFinanceDeptVicePresidentOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam11", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam11", ""));
							vars.put("exam11s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam11s", ""));
							approval.setStatus("a");
						}else{
							approval.setStatus("8");
						}
					} else if ("exam11".equals(taskDefKey)) {
						String opinion = approval.getGeneralManagerOpinion();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							vars.put("exam12", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam12", ""));
							vars.put("exam12s", WorkflowUtils.getWorkflowVarValue(PROC_DEF_KEY, "exam12s", ""));
							approval.setStatus("b");
						}else{
							approval.setStatus("9");
						}
					} else if ("exam12".equals(taskDefKey)) {
						String opinion = approval.getRemarks();
						comment = resultComment(approval, "通过", "驳回", opinion);
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							approval.setStatus("y");
							OaContractPurchaseStage oaContractPurchaseStage=oaContractPurchaseStageService.get(approval.getOaContractPurchaseStage().getId());
							oaContractPurchaseStage.setPayStageStatus("2");
							oaContractPurchaseStageService.save(oaContractPurchaseStage);
						}else{
							approval.setStatus("a");
						}
					}
					//归档
					if ("exam12".equals(taskDefKey)&&StringUtils.equals(approval.getAct().getFlag(), "true")) {
						//将审批中的付款金额更行到阶段的付款金额中去
						//拿到阶段id
						String idString=approval.getOaContractPurchaseStage().getId();
						OaContractPurchaseStage oaContractPurchaseStageDB=oaContractPurchaseStageService.get(idString);
						oaContractPurchaseStageDB.setPayMoney(approval.getPayMoney());
						oaContractPurchaseStageService.save(oaContractPurchaseStageDB);
					}
					approval.preUpdate();
					dao.update(approval);
					actTaskService.complete(taskId, procInsId, comment, title, vars);
					if ("exam1".equals(taskDefKey)) {
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							return "[采购合同付款申请][重新申请]操作已完成";
						}else{
							return "[采购合同付款申请][销毁申请]操作已完成";
						}
					}else{
						if (StringUtils.equals(approval.getAct().getFlag(), "true")) {
							return "[采购合同付款申请][通过申请]操作已完成";
						}else{
							return "[采购合同付款申请][驳回申请]操作已完成";
						}
					}
					
				}
			}
		}
		return "default message";
	}
	
	@Transactional(readOnly = false)
	public void save(OaContractPurchasePayApproval oaContractPurchasePayApproval) {
		super.save(oaContractPurchasePayApproval);
	}
	
	@Transactional(readOnly = false)
	public void delete(OaContractPurchasePayApproval oaContractPurchasePayApproval) {
		super.delete(oaContractPurchasePayApproval);
	}
	
	public List<OaProject> findOaProjectsBeenLinkedToOaContractPurchase() {
		return dao.findOaProjectsBeenLinkedToOaContractPurchase();
	}
	
	public static String resultComment(OaContractPurchasePayApproval oaContractPurchasePayApproval, String successText, String failText,
			String comment) {
		String result = failText;
		if (StringUtils.equals(oaContractPurchasePayApproval.getAct().getFlag(), "true")) {
			result = successText;
		}
		result = "[" + result + "]" + comment;
		return result;
	}
	
}