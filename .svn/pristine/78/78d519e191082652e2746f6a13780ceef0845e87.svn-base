/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.common.service;

import java.io.Serializable;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.ActEntity;
import com.thinkgem.jeesite.common.persistence.CrudDao;
import com.thinkgem.jeesite.common.persistence.DataEntity;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.sys.utils.WorkflowUtils;

/**
 * Service基类
 * @author ThinkGem
 * @version 2014-05-16
 */
@Transactional(readOnly = true)
public abstract class CrudService<D extends CrudDao<T>, T extends DataEntity<T>> extends BaseService {
	
	/**
	 * 持久层对象
	 */
	@Autowired
	protected D dao;
	
	/**
	 * 获取单条数据
	 * @param id
	 * @return
	 */
	public T get(String id) {
		return dao.get(id);
	}
	
	/**
	 * 获取单条数据
	 * @param entity
	 * @return
	 */
	public T get(T entity) {
		return dao.get(entity);
	}
	
	/**
	 * 查询列表数据
	 * @param entity
	 * @return
	 */
	public List<T> findList(T entity) {
		return dao.findList(entity);
	}
	
	/**
	 * 查询分页数据
	 * @param page 分页对象
	 * @param entity
	 * @return
	 */
	public Page<T> findPage(Page<T> page, T entity) {
		entity.setPage(page);
		page.setList(dao.findList(entity));
		return page;
	}

	/**
	 * 保存数据（插入或更新）
	 * @param entity
	 */
	@Transactional(readOnly = false)
	public void save(T entity) {
		if (entity.getIsNewRecord()){
			entity.preInsert();
			dao.insert(entity);
		}else{
			entity.preUpdate();
			dao.update(entity);
		}
	}
	
	/**
	 * 删除数据
	 * @param entity
	 */
	@Transactional(readOnly = false)
	public void delete(T entity) {
		dao.delete(entity);
	}

	/**
	 * 审批批注
	 * @param e
	 * @param successText
	 * @param failText
	 * @param comment
	 * @return
	 */
	public static <E extends ActEntity<E> & Serializable> String resultComment(E e,String successText, String failText,
	String comment) {
		String result = failText;
		if (StringUtils.equals(e.getAct().getFlag(), "true")) {
			result = successText;
		}
			result = "[" + result + "]" + comment;
			return result;
	}
	
	/**
	 * 退回处理
	 * @param e
	 * @param workflowName 流程名称
	 * @param url @@proNotify@@+查看流程路径
	 * 
	 * return 流程标题
	 */
	public static <E extends ActEntity<E> & Serializable> String retreatHandle(E e, String workflowName, String url)
	{
		String workflowTitle = "【" + UserUtils.get(e.getCreateBy().getId()).getName() + "】【" + workflowName
				+ "】已被" + "【" + UserUtils.getUser().getUsername() + "】" + "退回";
		
		String content = url + e.getId();
		
		WorkflowUtils.sendOaNotify(workflowTitle,content,e.getCreateBy().getId());
		
		return workflowTitle;
	}
	
	/**
	 * 流程标题
	 * @param workflowName 流程名称
	 * @return
	 */
	public String titleHandle(String workflowName)
	{
		return workflowName + "【" + UserUtils.getUser().getName() + " " + DateUtils.getDate() + "】";
	}
}
