/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.iim.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.thinkgem.jeesite.common.mapper.JsonMapper;
import com.thinkgem.jeesite.common.utils.FileUpload;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.iim.entity.IIMFriend;
import com.thinkgem.jeesite.modules.iim.entity.IIMInit;
import com.thinkgem.jeesite.modules.iim.entity.IIMMData;
import com.thinkgem.jeesite.modules.iim.entity.IIMMember;
import com.thinkgem.jeesite.modules.iim.entity.IIMdata;
import com.thinkgem.jeesite.modules.iim.entity.IimChatGroup;
import com.thinkgem.jeesite.modules.iim.service.IimChatGroupUserService;
import com.thinkgem.jeesite.modules.sys.dao.UserDao;
import com.thinkgem.jeesite.modules.sys.entity.Office;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.OfficeService;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

import net.sf.json.JSONObject;


/**
 * 联系人Controller
 * @author jeeplus
 * @version 2015-11-09
 */
@Controller
@RequestMapping(value = "${adminPath}/iim/contact")
public class ContactController extends BaseController {

	@Autowired
	private SystemService systemService;
	
	@Autowired
	private UserDao userDao;
	
	@Autowired
	private OfficeService officeService;
	
	
	@Autowired
	private IimChatGroupUserService groupUserService;
	
	
	/**
	 * 打开通讯录
	 * @param user
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = {"index", ""})
	public String index(User user, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<User> list = systemService.findUser(user);
        model.addAttribute("list", list);
		return "modules/iim/contacts";
	}

	
	/**
	 * 查找
	 * @param user<":;,'l
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "searchUsers")
	public String searchUsers(User user, HttpServletRequest request, HttpServletResponse response, Model model) {
			List<User> friends = userDao.searchUsers(user);
	        model.addAttribute("list", friends);
		return "modules/iim/search_user";
	}
	
	
//	/**
//	 * 添加好友--->常用联系人
//	 */
//	@RequestMapping(value = "addFriend")
//	public String addFriend(String ids, RedirectAttributes redirectAttributes) {
//		String idArray[] =ids.split(",");
//		User currentUser =  UserUtils.getUser();
//		for(String id : idArray){
//			 if(userDao.findFriend(currentUser.getId(), id) == null){
//			  
//				 userDao.insertFriend(IdGen.uuid(), currentUser.getId(), id);//添加对方为好友
//				// userDao.insertFriend(IdGen.uuid(), id, currentUser.getId());//同时把自己添加为对方的好友
//			 }
//		}
//		addMessage(redirectAttributes, "添加好友成功");
//		return "redirect:"+Global.getAdminPath()+"/iim/contact/myFriends/?repage";
//	}

	
//	/**
//	 * 删除好友
//	 */
//	@RequestMapping(value = "delFriend")
//	public String delFriend(String id, RedirectAttributes redirectAttributes) {
//		  User friend =   UserUtils.get(id);
//		  User currentUser =  UserUtils.getUser();
//		  if(friend != null &&  userDao.findFriend(currentUser.getId(), friend.getId()) != null){
//			  userDao.deleteFriend(currentUser.getId(), friend.getId());//删除好友
//			//  userDao.deleteFriend(friend.getId(), currentUser.getId());//同时把自己从对方的好友列表删除
//		  }
//		
//		return "redirect:"+Global.getAdminPath()+"/iim/contact/myFriends/?repage";
//	}

//	/**
//	 * 打开我的好友列表--->常用联系人列表
//	 * @param user
//	 * @param request
//	 * @param response
//	 * @param model
//	 * @return
//	 */
//	@RequestMapping(value = "myFriends")
//	public String myFriends(User user, HttpServletRequest request, HttpServletResponse response, Model model) {
//		User currentUser =  UserUtils.getUser();
//		List<User>  friends = userDao.findFriends(currentUser);
//        model.addAttribute("list", friends);
//		return "modules/iim/myFriends";
//	}

	
	
	
	
//	/**
//	 * 打开聊天窗口
//	 * @param user
//	 * @param request
//	 * @param response
//	 * @param model
//	 * @return
//	 */
//	@RequestMapping(value = "layerIM")
//	public String layerIM(User user, HttpServletRequest request, HttpServletResponse response, Model model) {
//		List<User> list = systemService.findUser(user);
//        model.addAttribute("list", list);
//		return "modules/iim/layerIM";
//	}
	
	@RequestMapping(value="friend")
	@ResponseBody
	public IIMInit getFriend(User user, HttpServletRequest request, HttpServletResponse response, Model model){
		IIMInit iimInit = new IIMInit();
		IIMdata iimdate = new IIMdata();
		
		User currentUser =  UserUtils.getUser();
		//List<User>  friends = userDao.findFriends(currentUser);
		
		iimdate.setMine(currentUser);
		List<Office> officeList = officeService.findList(true);
		List<IIMFriend> listf = new ArrayList<IIMFriend>();
		for(Office office : officeList){
			user.setOffice(office);
			List<User> users = userDao.findListByOffice(user);
			IIMFriend iimFriend = new IIMFriend();
			iimFriend.setId(office.getId());
			iimFriend.setGroupname(office.getName());
			iimFriend.setList(users);
			listf.add(iimFriend);
		}
		iimdate.setFriend(listf);
		
		List<IimChatGroup> listg = groupUserService.getGroupByuser(currentUser);//根据用户获取群列表
		
		
		iimdate.setGroup(listg);
		
		iimInit.setData(iimdate);
		
		
		return iimInit;
	}
	
	

	
	/***
	 * 群组成员接口
	 * @param user
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="group")
	@ResponseBody
	public IIMMember getGroupUser(IimChatGroup group, HttpServletRequest request, HttpServletResponse response, Model model){
		IIMMember iimmember = new IIMMember();
		List<User> userlist = groupUserService.getUserBygroup(group);
		List<User> list=new ArrayList<User> ();
		IIMMData iimdate = new IIMMData();
		User uiu= UserUtils.getUser();
		
		
		User uu =new User();
		uu.setUsername(uiu.getName());
		uu.setId(uiu.getId());
		uu.setAvatar(uiu.getPhoto());
		uu.setSign(uiu.getSign());
		list.add(uu);
		
		iimmember.setMsg("0");
		for (User user : userlist) {
			if(!user.getId().equals(uiu.getId()))
			{
				User u =new User();
				u.setUsername(user.getName());
				u.setId(user.getId());
				u.setAvatar(user.getPhoto());
				u.setSign(user.getSign());
				list.add(u);
			}
		}
		iimdate.setList(list);
		iimmember.setData(iimdate);
		
		System.out.println(JsonMapper.getInstance().toJson(iimmember));
		return iimmember;
	}
	
//	@RequestMapping(value="search")
//	@ResponseBody
//	public LayJson getSearch(User user, HttpServletRequest request, HttpServletResponse response, Model model){
//		LayJson j = new LayJson();
//		j.setStatus(1);
//		
//		List<Office> officeList = officeService.findList(true);
//		int index=1;
//		for(Office office : officeList){
//			user.setOffice(office);
//			List<User> users = userDao.findListByOffice(user);
//			Group group = new Group();
//			group.setName(office.getName());
//			group.setNums(users.size());
//			group.setId(++index);
//			for(User u : users){
//				Friend friend = new Friend();
//				friend.setId(u.getLoginName());
//				friend.setName(u.getName());
//				friend.setFace(u.getPhoto());
//				group.getItem().add(friend);
//			}
//			j.getData().add(group);
//		}
//		user.setOffice(null);
//		List<User> users = userDao.findListByOffice(user);
//		Group group = new Group();
//		group.setName("未分组");
//		group.setNums(users.size());
//		group.setId(++index);
//		for(User u : users){
//			Friend friend = new Friend();
//			friend.setId(u.getLoginName());
//			friend.setName(u.getName());
//			friend.setFace(u.getPhoto());
//			group.getItem().add(friend);
//		}
//		j.getData().add(group);
//		
//		return j;
//	}
	
//	/**
//	 * 群组列表接口 预留待开发
//	 * @return
//	 */
//	@RequestMapping(value="group")
//	@ResponseBody
//	public LayJson getGroup(){
//		LayJson j = new LayJson();
//		j.setStatus(1);
//		return j;
//	}
//	/**
//	 * 最近联系人接口 预留
//	 * @return
//	 */
//	@RequestMapping(value="chatLog")
//	@ResponseBody
//	public LayJson getChatLog(User user, HttpServletRequest request, HttpServletResponse response, Model model){
//		LayJson j = new LayJson();
//		j.setStatus(1);
//		
//		User currentUser =  UserUtils.getUser();
//		ChatHistory chatHistory = new ChatHistory();
//		chatHistory.setUserid1(currentUser.getLoginName());
//		chatHistory.setUserid2(currentUser.getLoginName());
//		List<ChatHistory> lch = chatHistoryService.findNearPerson(chatHistory);
//		List<String> lists = new ArrayList<String>();
//		for (ChatHistory ch : lch) {
//			if(!lists.contains(ch.getUserid1())){
//				lists.add(ch.getUserid1());
//			}
//			if(!lists.contains(ch.getUserid2())){
//				lists.add(ch.getUserid2());
//			}
//		}
//		
//		List<User>  friends = new ArrayList<User>();
//		for (String ls : lists) {
//			user.setLoginName(ls);
//			friends.add(userDao.findFriendLoginName(user));
//		}
//		//最近联系人
//		//List<User>  friends = userDao.findFriends(currentUser);
//		Group friendGroup = new Group();
//		friendGroup.setName("最近联系人");
//		friendGroup.setId(3);
//		friendGroup.setNums(friends.size());
//		for(User u : friends){
//			Friend friend = new Friend();
//			friend.setId(u.getLoginName());
//			friend.setName(u.getName());
//			friend.setFace(u.getPhoto());
//			
//			ChatHistory chatHistory2 = new ChatHistory();
//			chatHistory2.setUserid1(u.getLoginName());
//			chatHistory2.setUserid2(currentUser.getLoginName());
//			SimpleDateFormat sdf = new SimpleDateFormat("MM-dd HH:mm");
//			friend.setTime(sdf.format(chatHistoryService.findNearPerson2(chatHistory2).get(0).getCreateDate()));
//			friendGroup.getItem().add(friend);
//		}
//		j.getData().add(friendGroup);
//		return j;
//	}
	/**
	 * 群组成员接口 预留
	 *  @return
	 */
//	@RequestMapping(value="groups")
//	@ResponseBody
//	public LayJson getGroups(){
//		LayJson j = new LayJson();
//		j.setStatus(1);
//		return j;
//	}
	
	
	
	
	
	
	/**
	 * 聊天中图片的保存
	 * @param file 上传的图片
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="image")
	@ResponseBody
	public JSONObject uploadImage(MultipartFile file , HttpServletRequest request, HttpServletResponse response, Model model){
		String path = FileUpload.imageUpload(file);
		Map<String, Object> m = new HashMap<String, Object>();
		Map<String, Object> m2 = new HashMap<String, Object>();
		m.put("code", 0);
		m.put("msg", "");
		m2.put("src", path);
		m.put("data", m2);
		return JSONObject.fromObject(m);
	}
	
	/**
	 * 聊天中图片的保存
	 * @param file 上传的图片
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="file")
	@ResponseBody
	public JSONObject uploadFile(MultipartFile file , HttpServletRequest request, HttpServletResponse response, Model model){
		String path = FileUpload.fileUpload(file);
		Map<String, Object> m = new HashMap<String, Object>();
		Map<String, Object> m2 = new HashMap<String, Object>();
		m.put("code", 0);
		m.put("msg", "");
		m2.put("src", path);
		m2.put("name", file.getOriginalFilename());
		m.put("data", m2);
		return JSONObject.fromObject(m);
	}
	
	/**
	 * 修改签名
	 * @param sign
	 * @param username
	 * @throws IOException 
	 */
	@RequestMapping(value="updateSign")
	@ResponseBody
	public void updateSign(HttpServletResponse response,String sign,String username) throws IOException{
		User user = systemService.getUserByLoginName(username);
		user.setSign(sign);
		systemService.updateUserInfo(user);
		renderString(response,true);
	}
	
}