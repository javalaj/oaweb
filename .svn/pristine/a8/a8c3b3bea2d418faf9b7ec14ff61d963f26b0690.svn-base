/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.oa.web.fixedassets;

import java.io.InputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.mapper.JsonMapper;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.oa.entity.Supmanagement;
import com.thinkgem.jeesite.modules.oa.entity.fixedassets.AssetsClaim;
import com.thinkgem.jeesite.modules.oa.entity.fixedassets.AssetsEquipment;
import com.thinkgem.jeesite.modules.oa.entity.fixedassets.AssetsInventory;
import com.thinkgem.jeesite.modules.oa.entity.fixedassets.FixedAssets;
import com.thinkgem.jeesite.modules.oa.service.SupmanagementService;
import com.thinkgem.jeesite.modules.oa.service.fixedassets.AssetsClaimService;
import com.thinkgem.jeesite.modules.oa.service.fixedassets.AssetsEquipmentService;
import com.thinkgem.jeesite.modules.oa.service.fixedassets.AssetsInventoryService;
import com.thinkgem.jeesite.modules.oa.service.fixedassets.FixedAssetsService;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;
import com.thinkgem.jeesite.modules.sys.utils.OrdersUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

/**
 * 固定资产管理Controller
 * @author zf
 * @version 2016-11-15
 */
@Controller
@RequestMapping(value = "${adminPath}/fixedassets/fixedAssets")
public class FixedAssetsController extends BaseController {

	@ModelAttribute
	public FixedAssets get(@RequestParam(required=false) String id) {
		FixedAssets entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = fixedAssetsService.get(id);
		}
		if (entity == null){
			entity = new FixedAssets();
		}
		return entity;
	}
	
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = {"list", ""})
	public String list(FixedAssets fixedAssets, HttpServletRequest request, 
			HttpServletResponse response, Model model) 
	{
		Page<FixedAssets> page = fixedAssetsService.
				findPage(new Page<FixedAssets>(request, response), fixedAssets); 
		
		model.addAttribute("page", page);
		
		return "modules/fixedassets/fixedAssetsList";
	}

	/**
	 * 资产使用情况展示
	 * @param assetsClaim
	 * @param request
	 * @param response
	 * @param model
	 * @param type
	 * @return
	 */
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = {"claimList"})
	public String claimList(AssetsClaim assetsClaim, HttpServletRequest request, 
			HttpServletResponse response, Model model,String type) 
	{
		if (null != type)
			assetsClaim.setType(type);
		
		Page<AssetsClaim> page = assetsClaimService.findPage(new Page<AssetsClaim>(request, response), assetsClaim); 
		
		model.addAttribute("page", page);
		
		return "modules/fixedassets/assetsClaimList";
	}
	
	/**
	 * 申请页面
	 * @param fixedAssets
	 * @param model
	 * @return
	 */
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = {"apply"})
	public String apply(AssetsInventory assetsInventory, HttpServletRequest request, 
			HttpServletResponse response, Model model)
	{
		//当前用作为查询条件
		assetsInventory.setUserid(UserUtils.getUser().getId());
		
		/*List<FixedAssets> list = fixedAssetsService.findApplyList(
				assetsInventoryService.findAssetsId(UserUtils.getUser().getId()));
		
		model.addAttribute("list", list);*/
		
		List<AssetsInventory> list = assetsInventoryService.findList(assetsInventory);
		
		model.addAttribute("list", list);
		
		/*Page<AssetsInventory> page = assetsInventoryService
				.findPage(new Page<AssetsInventory>(request, response), assetsInventory);
		
		model.addAttribute("page", page);*/
		
		return "modules/fixedassets/applyList";
	}

	
	
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = "form")
	public String form(FixedAssets fixedAssets, Model model) 
	{
		/**session对象*/
		HttpSession session = ((ServletRequestAttributes)RequestContextHolder
				.getRequestAttributes()).getRequest().getSession();
		
		FixedAssets obj = (FixedAssets) session.getAttribute("obj");
		
		if (obj != null)
		{
			fixedAssets = obj;
			
			session.setAttribute("obj", null);
		}
		
		List<Supmanagement> supList = supmanagementService
				.findList(new Supmanagement());
		
		model.addAttribute("supList", supList);
		
		model.addAttribute("fixedAssets", fixedAssets);
		
		return "modules/fixedassets/fixedAssetsForm";
	}

	@RequiresPermissions("fixedassets:fixedAssets:edit")
	@RequestMapping(value = "modify")
	public String modify(FixedAssets fixedAssets, Model model, String equipId)
	{
		AssetsEquipment assetsEquipment = assetsEquipmentService.get(equipId);
		
		List<Supmanagement> supList = supmanagementService
				.findList(new Supmanagement());
		
		model.addAttribute("supList", supList);
		
		model.addAttribute("fixedAssets", fixedAssets);
		
		model.addAttribute("assetsEquipment", assetsEquipment);
		
		return "modules/fixedassets/modify";
	}
	
	@RequiresPermissions("fixedassets:fixedAssets:edit")
	@RequestMapping(value = "modifySave")
	public String modifySave(FixedAssets fixedAssets, RedirectAttributes redirectAttributes)
	{
		fixedAssetsService.update(fixedAssets);
		
		addMessage(redirectAttributes, "修改固定资产成功");
		
		AssetsEquipment assetsEquipment = new AssetsEquipment();
		
		assetsEquipment.setCondition("在库");
		
		redirectAttributes.addFlashAttribute("assetsEquipment", assetsEquipment);
		
		return "redirect:"+Global.getAdminPath()+"/fixedassets/assetsEquipment/claimList?assetsEquipment.condition=1";
	}
	
	@RequiresPermissions("fixedassets:fixedAssets:edit")
	@RequestMapping(value = "save")
	public String save(FixedAssets fixedAssets, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, fixedAssets)){
			return form(fixedAssets, model);
		}
		
		fixedAssetsService.save(fixedAssets);
		
		/**session对象*/
		HttpSession session = ((ServletRequestAttributes)RequestContextHolder
				.getRequestAttributes()).getRequest().getSession();
		
		session.setAttribute("obj", fixedAssets);
		
		addMessage(redirectAttributes, "保存固定资产成功");
		
		return "redirect:"+Global.getAdminPath()+"/fixedassets/fixedAssets/form";
	}
	
	@RequiresPermissions("fixedassets:fixedAssets:edit")
	@RequestMapping(value = "delete")
	public String delete(FixedAssets fixedAssets, RedirectAttributes redirectAttributes) {
		fixedAssetsService.delete(fixedAssets);
		addMessage(redirectAttributes, "删除固定资产成功");
		return "redirect:"+Global.getAdminPath()+"/fixedassets/fixedAssets/?repage";
	}
	
	/**
	 * 添加入购物车
	 * @param request
	 * @param response
	 * @return
	 */
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = "addInventory")
	@ResponseBody
	public String addInventory(HttpServletRequest request,
			HttpServletResponse response)
	{
		String id = request.getParameter("id");
		
		String equ_id = request.getParameter("equ_id");
		
		/*Integer amount = assetsInventoryService.findCount(id);
		
		//当前库存
		int currentAmount = fixedAssetsService.get(id).getAmount();
		
		//判断物品栏中是否存在相同物品并且库存不能为空
		if (0 == amount && 0 != currentAmount)
			assetsInventoryService.add(id,equ_id);
		
		return JsonMapper.getInstance().toJson(currentAmount != 0 ? true : false);*/
		
		//判断购物车中是否存在改物品
		if (assetsInventoryService.findEquId(equ_id) == 0)
		{
			assetsInventoryService.add(id,equ_id);
			//锁定库存
			AssetsEquipment assetsEquipment = assetsEquipmentService.get(equ_id);
			
			assetsEquipment.setCondition("申请中");
			
			assetsEquipmentService.save(assetsEquipment);
		}
		return JsonMapper.getInstance().toJson(true);
	}
	
	/**
	 * 查询物品栏是否为空
	 * @param request
	 * @param response
	 * @return
	 */
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = "queryInventory")
	@ResponseBody
	public String queryInventory(HttpServletRequest request,
			HttpServletResponse response)
	{
		int amount = assetsInventoryService.findCountUserId();
		
		return JsonMapper.getInstance().toJson(amount == 0 ? true : false);
	}
	
	//根据主键删除
	@RequiresPermissions("fixedassets:fixedAssets:view")
	@RequestMapping(value = "delInventory")
	@ResponseBody
	public String delInventory(HttpServletRequest request,
			HttpServletResponse response)
	{
		String id = request.getParameter("id");
		
		String equid = request.getParameter("equid");
		
		assetsInventoryService.delete(assetsInventoryService.get(id));
		
		AssetsEquipment assetsEquipment = assetsEquipmentService.get(equid);
		
		assetsEquipment.setCondition("在库");
		
		assetsEquipmentService.save(assetsEquipment);
		
		return JsonMapper.getInstance().toJson(true);
	}

	/**
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("fixedassets:fixedAssets:edit")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		try 
		{
			InputStream is = file.getInputStream();
			
			HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);
			
			HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);
			
			int successNum = 0;
			
			int failureNum = 0;
			
			for (int i = 2; i <= hssfSheet.getLastRowNum(); i++) 
			{
				try 
				{
					HSSFRow hssfRow = hssfSheet.getRow(i);
					
					hssfRow.getCell(0).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell0 = hssfRow.getCell(0).getStringCellValue();
					
					hssfRow.getCell(1).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell1 = hssfRow.getCell(1).getStringCellValue();
					
					hssfRow.getCell(2).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell2 = hssfRow.getCell(2).getStringCellValue();
					
					hssfRow.getCell(3).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell3 = hssfRow.getCell(3).getStringCellValue();
					
					hssfRow.getCell(4).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell4 = hssfRow.getCell(4).getStringCellValue();
					
					hssfRow.getCell(5).setCellType(Cell.CELL_TYPE_NUMERIC);
					
					Integer cell5 = (int) hssfRow.getCell(5).getNumericCellValue();
					
					hssfRow.getCell(6).setCellType(Cell.CELL_TYPE_NUMERIC);
					
					Double cell6 = hssfRow.getCell(6).getNumericCellValue();
					
					hssfRow.getCell(7).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell7 = hssfRow.getCell(7).getStringCellValue();
					
					hssfRow.getCell(8).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell8 = hssfRow.getCell(8).getStringCellValue();

					hssfRow.getCell(9).setCellType(Cell.CELL_TYPE_STRING);
					
					String cell9 = hssfRow.getCell(9).getStringCellValue();					
					
					FixedAssets fixedAssets = new FixedAssets();
					
					fixedAssets.setAssetsName(cell0);
					
					fixedAssets.setAssetsCategory(DictUtils.getDictValue(cell1, "assets_category", "1"));
					
					fixedAssets.setBrand(DictUtils.getDictValue(cell2, "equ_brand", "0"));
					
					fixedAssets.setModel(cell3);
					
					fixedAssets.setSpecifications(cell4);
					
					fixedAssets.setAmount(cell5);
					
					fixedAssets.setUnitPrice(cell6);
					
					fixedAssets.setUnit(DictUtils.getDictValue(cell7, "unit", "0"));
					
					fixedAssets.setSupplier(findSupplier(cell8));
					
					fixedAssets.setPurchaseDate(DateUtils.parseDate(cell9));
					
					fixedAssets.setRemarks("");
					
					fixedAssetsService.update(fixedAssets);
					
					String category = fixedAssetsService.getCategory(DictUtils.getDictValue(cell1, "assets_category", "0"));
					
					for (int k = 0;k < cell5;k++)
					{
						AssetsEquipment obj = new AssetsEquipment();
						
						obj.setAssetsNumber(fixedAssets.getId());
						
						String serialNumber = OrdersUtils.getGenerateOrderNo8(category + "-");
						
						obj.setSerialNumber(serialNumber);
						
						obj.setRemarks("");
						
						obj.setCondition("在库");	//默认库存状态
						
						assetsEquipmentService.save(obj);
						
						successNum++;
					}					
				} 
				catch (Exception e) 
				{
					failureNum++;
				}
			}
			
			StringBuilder failureMsg = new StringBuilder();
			
			if (failureNum > 0) 
			{
				failureMsg.insert(0, "，失败 " + failureNum + " 固定资产，导入信息如下：");
			}
			
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 固定资产" + failureMsg);
		} 
		catch (Exception e) 
		{
			addMessage(redirectAttributes, "导入固定资产失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/fixedassets/assetsEquipment/claimList?assetsEquipment.condition=1";
	}	

	private String findSupplier(String sname)
	{
		Supmanagement supObj = new Supmanagement();
		
		supObj.setDelFlag("0");
			
		List<Supmanagement> supList = supmanagementService.findList(supObj);
		
		for (Supmanagement supmanagement : supList) {
			if (StringUtils.equals(supmanagement.getSupName(),sname))
					return supmanagement.getId();
		}
		return null;
	}	
	
	/*-----------------------------------------------参数---------------------------------------------------------*/

	@Autowired
	private FixedAssetsService fixedAssetsService;
	
	@Autowired
	private SupmanagementService supmanagementService;
	
	@Autowired
	private AssetsClaimService assetsClaimService;
	
	@Autowired
	private AssetsInventoryService assetsInventoryService;
	
	@Autowired
	private AssetsEquipmentService assetsEquipmentService;
}