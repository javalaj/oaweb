<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.oa.dao.fixedassets.AssetsInventoryDao">
    
	<sql id="assetsInventoryColumns">
		a.id AS "id",
		a.equ_id as "equId",
		a.userid AS "userid",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.remarks AS "remarks",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.assetsid AS "fixedAssets.id",
		b.assets_name as "fixedAssets.assetsName",
		b.serial_number as "fixedAssets.serialNumber",
		b.assets_category as "fixedAssets.assetsCategory",
		b.brand as "fixedAssets.brand",
		b.amount as "fixedAssets.amount",
		b.specifications as "fixedAssets.specifications",
		b.supplier as "fixedAssets.supplier",
		b.photo as "fixedAssets.photo",
		b.purchase_date as "fixedAssets.purchaseDate",
		b.unit_price as "fixedAssets.unitPrice",
		b.unit as "fixedAssets.unit",
		b.model as "fixedAssets.model"
	</sql>
	
	<sql id="assetsInventoryJoins">
		LEFT JOIN fixed_assets b ON b.id = a.assetsId
	</sql>
    
	<select id="get" resultType="AssetsInventory">
		SELECT 
			<include refid="assetsInventoryColumns"/>
		FROM assets_inventory a
			<include refid="assetsInventoryJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="AssetsInventory">
		SELECT 
			<include refid="assetsInventoryColumns"/>
		FROM assets_inventory a
			<include refid="assetsInventoryJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="userid != null and userid != ''">
				AND a.userid = #{userid}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="AssetsInventory">
		SELECT 
			<include refid="assetsInventoryColumns"/>
		FROM assets_inventory a
			<include refid="assetsInventoryJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAssetsId" resultType="String" parameterType="String">
		select assetsId from assets_inventory
		where del_flag = 0
		and userId = #{userID}
	</select>
	
	<select id="findCountUserId" parameterType="String" resultType="Integer">
		select count(id) from assets_inventory 
		where del_flag = 0
		and userId = #{userId}
	</select>
	
	<select id="findCount" resultType="Integer">
		select count(id) from assets_inventory 
		where del_flag = 0 and userId = #{0}
		and assetsId = #{1}
	</select>
	
	<select id="findEquId" resultType="Integer">
		select count(id) from assets_inventory 
		where del_flag = 0 and userId = #{0}
		and equ_id = #{1}
	</select>
	
	<insert id="insert">
		INSERT INTO assets_inventory(
			id,
			userid,
			create_by,
			create_date,
			update_by,
			remarks,
			update_date,
			del_flag,
			assetsid,
			equ_id
		) VALUES (
			#{id},
			#{userid},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{remarks},
			#{updateDate},
			#{delFlag},
			#{fixedAssets.id},
			#{equId}
		)
	</insert>
	
	<update id="update">
		UPDATE assets_inventory SET 	
			userid = #{userid},
			update_by = #{updateBy.id},
			remarks = #{remarks},
			update_date = #{updateDate},
			assetsid = #{fixedAssets.id},
			equ_id = #{equId}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE assets_inventory SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByUserId" parameterType="String">
		UPDATE assets_inventory SET 
			del_flag = 1
		WHERE userid = #{userid}
	</update>
	
</mapper>